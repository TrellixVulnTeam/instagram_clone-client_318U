{"ast":null,"code":"import _regeneratorRuntime from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getDataAPI}from\"../../utils/fetchData\";import{NOTIFY_TYPES}from\"../types/notifyTypes\";import{SUGGESTION_TYPES}from\"../types/suggestionTypes\";export var getSuggestionsAction=function getSuggestionsAction(token){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:SUGGESTION_TYPES.LOADING,payload:true});_context.next=4;return getDataAPI(\"suggestionsUser\",token);case 4:res=_context.sent;dispatch({type:SUGGESTION_TYPES.GET_USERS,payload:res.data});dispatch({type:SUGGESTION_TYPES.LOADING,payload:false});_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);dispatch({type:NOTIFY_TYPES.NOTIFY,payload:{error:_context.t0.response.data.msg}});case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/suggestionActions.js"],"names":["getDataAPI","NOTIFY_TYPES","SUGGESTION_TYPES","getSuggestionsAction","token","dispatch","type","LOADING","payload","res","GET_USERS","data","NOTIFY","error","response","msg"],"mappings":"qTAAA,OAASA,UAAT,KAA2B,uBAA3B,CACA,OAASC,YAAT,KAA6B,sBAA7B,CACA,OAASC,gBAAT,KAAiC,0BAAjC,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAW,CAC7C,+FAAO,iBAAOC,QAAP,0IAEHA,QAAQ,CAAC,CACPC,IAAI,CAAEJ,gBAAgB,CAACK,OADhB,CAEPC,OAAO,CAAE,IAFF,CAAD,CAAR,CAFG,sBAOeR,CAAAA,UAAU,CAAC,iBAAD,CAAoBI,KAApB,CAPzB,QAOGK,GAPH,eASHJ,QAAQ,CAAC,CACPC,IAAI,CAAEJ,gBAAgB,CAACQ,SADhB,CAEPF,OAAO,CAAEC,GAAG,CAACE,IAFN,CAAD,CAAR,CAKAN,QAAQ,CAAC,CACPC,IAAI,CAAEJ,gBAAgB,CAACK,OADhB,CAEPC,OAAO,CAAE,KAFF,CAAD,CAAR,CAdG,+EAmBHH,QAAQ,CAAC,CACPC,IAAI,CAAEL,YAAY,CAACW,MADZ,CAEPJ,OAAO,CAAE,CAAEK,KAAK,CAAE,YAAIC,QAAJ,CAAaH,IAAb,CAAkBI,GAA3B,CAFF,CAAD,CAAR,CAnBG,oEAAP,+DAyBD,CA1BM","sourcesContent":["import { getDataAPI } from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { SUGGESTION_TYPES } from \"../types/suggestionTypes\";\r\n\r\nexport const getSuggestionsAction = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: SUGGESTION_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n\r\n      const res = await getDataAPI(\"suggestionsUser\", token);\r\n\r\n      dispatch({\r\n        type: SUGGESTION_TYPES.GET_USERS,\r\n        payload: res.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: SUGGESTION_TYPES.LOADING,\r\n        payload: false,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}