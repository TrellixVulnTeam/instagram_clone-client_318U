{"ast":null,"code":"import _regeneratorRuntime from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{deleteDataAPI,getDataAPI,patchDataAPI,postDataAPI}from\"../../utils/fetchData\";import{NEW_TYPES}from\"../types/newTypes\";import{NOTIFY_TYPES}from\"../types/notifyTypes\";export var createNewsNotify=function createNewsNotify(_ref){var msg=_ref.msg,auth=_ref.auth,socket=_ref.socket;return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return postDataAPI(\"notify\",msg,auth.token);case 3:res=_context.sent;socket.emit(\"createNotify\",_objectSpread(_objectSpread({},res.data.notify),{},{user:{username:auth.user.username,avatar:auth.user.avatar,_id:auth.user._id}}));_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);dispatch({type:NOTIFY_TYPES.NOTIFY,payload:{error:_context.t0.response.data.msg}});case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function(_x){return _ref2.apply(this,arguments);};}();};export var removeNewsNotify=function removeNewsNotify(_ref3){var msg=_ref3.msg,auth=_ref3.auth,socket=_ref3.socket;return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return deleteDataAPI(\"notify/\".concat(msg.id,\"?url=\").concat(msg.url),auth.token);case 3:res=_context2.sent;socket.emit(\"removeNotify\",msg);_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);dispatch({type:NOTIFY_TYPES.NOTIFY,payload:{error:_context2.t0.response.data.msg}});case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return function(_x2){return _ref4.apply(this,arguments);};}();};export var getNewsNotifies=function getNewsNotifies(token){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return getDataAPI(\"notifies\",token);case 3:res=_context3.sent;dispatch({type:NEW_TYPES.GET_NOTIFIES,payload:res.data.notifies});_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);dispatch({type:NOTIFY_TYPES.NOTIFY,payload:{error:_context3.t0.response.data.msg}});case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function(_x3){return _ref5.apply(this,arguments);};}();};export var isReadNotify=function isReadNotify(_ref6){var msg=_ref6.msg,auth=_ref6.auth;return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dispatch({type:NEW_TYPES.UPDATE_NOTIFY,payload:_objectSpread(_objectSpread({},msg),{},{isRead:true})});_context4.prev=1;_context4.next=4;return patchDataAPI(\"/isReadNotify/\".concat(msg._id),null,auth.token);case 4:_context4.next=9;break;case 6:_context4.prev=6;_context4.t0=_context4[\"catch\"](1);dispatch({type:NOTIFY_TYPES.NOTIFY,payload:{error:_context4.t0.response.data.msg}});case 9:case\"end\":return _context4.stop();}}},_callee4,null,[[1,6]]);}));return function(_x4){return _ref7.apply(this,arguments);};}();};export var deleteAllNotifies=function deleteAllNotifies(token){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:dispatch({type:NEW_TYPES.DELETE_ALL_NOTIFIES,payload:[]});_context5.prev=1;_context5.next=4;return deleteDataAPI(\"deleteAllNotifies\",token);case 4:_context5.next=9;break;case 6:_context5.prev=6;_context5.t0=_context5[\"catch\"](1);dispatch({type:NOTIFY_TYPES.NOTIFY,payload:{error:_context5.t0.response.data.msg}});case 9:case\"end\":return _context5.stop();}}},_callee5,null,[[1,6]]);}));return function(_x5){return _ref8.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/newsActions.js"],"names":["deleteDataAPI","getDataAPI","patchDataAPI","postDataAPI","NEW_TYPES","NOTIFY_TYPES","createNewsNotify","msg","auth","socket","dispatch","token","res","emit","data","notify","user","username","avatar","_id","type","NOTIFY","payload","error","response","removeNewsNotify","id","url","getNewsNotifies","GET_NOTIFIES","notifies","isReadNotify","UPDATE_NOTIFY","isRead","deleteAllNotifies","DELETE_ALL_NOTIFIES"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { NEW_TYPES } from \"../types/newTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const createNewsNotify = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await postDataAPI(\"notify\", msg, auth.token);\r\n      socket.emit(\"createNotify\", {\r\n        ...res.data.notify,\r\n        user: {\r\n          username: auth.user.username,\r\n          avatar: auth.user.avatar,\r\n          _id: auth.user._id,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeNewsNotify = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await deleteDataAPI(\r\n        `notify/${msg.id}?url=${msg.url}`,\r\n        auth.token\r\n      );\r\n\r\n      socket.emit(\"removeNotify\", msg);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getNewsNotifies = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\"notifies\", token);\r\n      dispatch({\r\n        type: NEW_TYPES.GET_NOTIFIES,\r\n        payload: res.data.notifies,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const isReadNotify = ({ msg, auth }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: NEW_TYPES.UPDATE_NOTIFY,\r\n      payload: { ...msg, isRead: true },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteAllNotifies = (token) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: NEW_TYPES.DELETE_ALL_NOTIFIES,\r\n      payload: [],\r\n    });\r\n\r\n    try {\r\n      await deleteDataAPI(\"deleteAllNotifies\", token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}