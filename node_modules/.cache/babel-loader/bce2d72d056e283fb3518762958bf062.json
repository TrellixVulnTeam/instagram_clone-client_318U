{"ast":null,"code":"import { postDataAPI } from \"../../utils/fetchData\";\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nexport const addUserAction = ({\n  user,\n  message\n}) => {\n  return async dispatch => {\n    if (message.users.every(item => item._id !== user._id)) {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: user\n      });\n    }\n  };\n};\nexport const addMessageAction = ({\n  msg,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n\n    try {\n      const res = await postDataAPI(\"message\", msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/messageActions.js"],"names":["postDataAPI","MESSAGE_TYPES","NOTIFY_TYPES","addUserAction","user","message","dispatch","users","every","item","_id","type","ADD_USER","payload","addMessageAction","msg","auth","socket","ADD_MESSAGE","res","token","err","NOTIFY","error","response","data"],"mappings":"AAAA,SAASA,WAAT,QAA4B,uBAA5B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAClD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAID,OAAO,CAACE,KAAR,CAAcC,KAAd,CAAqBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaN,IAAI,CAACM,GAAhD,CAAJ,EAA0D;AACxDJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEV,aAAa,CAACW,QADb;AAEPC,QAAAA,OAAO,EAAET;AAFF,OAAD,CAAR;AAID;AACF,GAPD;AAQD,CATM;AAWP,OAAO,MAAMU,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA2B;AACzD,SAAO,MAAOX,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,aAAa,CAACiB,WADb;AAEPL,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;;AAKA,QAAI;AACF,YAAMI,GAAG,GAAG,MAAMnB,WAAW,CAAC,SAAD,EAAYe,GAAZ,EAAiBC,IAAI,CAACI,KAAtB,CAA7B;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,YAAY,CAACoB,MADZ;AAEPT,QAAAA,OAAO,EAAE;AAAEU,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBV;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAdD;AAeD,CAhBM","sourcesContent":["import { postDataAPI } from \"../../utils/fetchData\";\r\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const addUserAction = ({ user, message }) => {\r\n  return async (dispatch) => {\r\n    if (message.users.every((item) => item._id !== user._id)) {\r\n      dispatch({\r\n        type: MESSAGE_TYPES.ADD_USER,\r\n        payload: user,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addMessageAction = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: MESSAGE_TYPES.ADD_MESSAGE,\r\n      payload: msg,\r\n    });\r\n\r\n    try {\r\n      const res = await postDataAPI(\"message\", msg, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}