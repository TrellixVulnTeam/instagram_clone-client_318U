{"ast":null,"code":"import { postDataAPI } from \"../../utils/fetchData\";\nimport { validForm } from \"../../utils/validForm\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nexport const loginAction = data => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      const res = await postDataAPI(\"login\", data);\n      dispatch({\n        type: AUTH_TYPES.AUTH,\n        payload: {\n          token: res.data.accessToken,\n          user: res.data.user\n        }\n      });\n      localStorage.setItem(\"firstLogin\", true);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const refreshToken = () => {\n  return async dispatch => {\n    const firstLogin = localStorage.getItem(\"firstLogin\");\n\n    if (firstLogin) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n\n      try {\n        const res = await postDataAPI(\"refresh_token\");\n        dispatch({\n          type: AUTH_TYPES.AUTH,\n          payload: {\n            token: res.data.accessToken,\n            user: res.data.user\n          }\n        });\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {}\n        });\n      } catch (err) {\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const registerAction = data => {\n  return async dispatch => {\n    try {\n      const check = validForm(data);\n      if (check.errLength > 0) return dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: check.errMsg.email || check.errMsg.fullname || check.errMsg.password || check.errMsg.username\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/authActions.js"],"names":["postDataAPI","validForm","AUTH_TYPES","NOTIFY_TYPES","loginAction","data","dispatch","type","NOTIFY","payload","loading","res","AUTH","token","accessToken","user","localStorage","setItem","success","msg","err","error","response","refreshToken","firstLogin","getItem","registerAction","check","errLength","errMsg","email","fullname","password","username"],"mappings":"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","sourcesContent":["import { postDataAPI } from \"../../utils/fetchData\";\r\nimport { validForm } from \"../../utils/validForm\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const loginAction = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      const res = await postDataAPI(\"login\", data);\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: { token: res.data.accessToken, user: res.data.user },\r\n      });\r\n      localStorage.setItem(\"firstLogin\", true);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const refreshToken = () => {\r\n  return async (dispatch) => {\r\n    const firstLogin = localStorage.getItem(\"firstLogin\");\r\n    if (firstLogin) {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      try {\r\n        const res = await postDataAPI(\"refresh_token\");\r\n        dispatch({\r\n          type: AUTH_TYPES.AUTH,\r\n          payload: { token: res.data.accessToken, user: res.data.user },\r\n        });\r\n        dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: {} });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const registerAction = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const check = validForm(data);\r\n      if (check.errLength > 0)\r\n        return dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: {\r\n            error:\r\n              check.errMsg.email ||\r\n              check.errMsg.fullname ||\r\n              check.errMsg.password ||\r\n              check.errMsg.username,\r\n          },\r\n        });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}