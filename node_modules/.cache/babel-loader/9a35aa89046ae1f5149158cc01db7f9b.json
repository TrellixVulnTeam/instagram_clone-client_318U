{"ast":null,"code":"import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { deleteData } from \"../types/globalTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\nexport const getProfileUsers = ({\n  users,\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    if (users.every(user => user._id !== id)) {\n      try {\n        dispatch({\n          type: PROFILE_TYPES.LOADING,\n          payload: true\n        });\n        const res = await getDataAPI(`/user/${id}`, auth.token);\n        dispatch({\n          type: PROFILE_TYPES.GET_USER,\n          payload: res.data\n        });\n        dispatch({\n          type: PROFILE_TYPES.LOADING,\n          payload: false\n        });\n      } catch (err) {\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Please add your full name\"\n    }\n  });\n  if (userData.fullname.length > 25) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your full name is too long\"\n    }\n  });\n  if (userData.story.length > 200) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your story is too long\"\n    }\n  });\n\n  try {\n    let media;\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        loading: true\n      }\n    });\n    if (avatar) media = await imageUpload([avatar]);\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const changePasswordUser = ({\n  userData,\n  auth\n}) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const followAction = ({\n  users,\n  user,\n  auth\n}) => {\n  return async dispatch => {\n    let newUser = { ...user,\n      followers: [...user.followers, auth.user]\n    };\n    dispatch({\n      type: PROFILE_TYPES.FOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: [...auth.user.following, newUser]\n        }\n      }\n    });\n  };\n};\nexport const unFollowAction = ({\n  users,\n  user,\n  auth\n}) => {\n  return async dispatch => {\n    let newUser = { ...user,\n      followers: deleteData(user.followers, auth.user._id)\n    };\n    console.log(newUser);\n    dispatch({\n      type: PROFILE_TYPES.UNFOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: deleteData(auth.user.following, newUser._id)\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/profileActions.js"],"names":["getDataAPI","patchDataAPI","imageUpload","AUTH_TYPES","deleteData","NOTIFY_TYPES","PROFILE_TYPES","getProfileUsers","users","id","auth","dispatch","every","user","_id","type","LOADING","payload","res","token","GET_USER","data","err","NOTIFY","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","AUTH","success","changePasswordUser","followAction","newUser","followers","FOLLOW","following","unFollowAction","console","log","UNFOLLOW"],"mappings":"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","sourcesContent":["import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { deleteData } from \"../types/globalTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\r\n\r\nexport const getProfileUsers = ({ users, id, auth }) => {\r\n  return async (dispatch) => {\r\n    if (users.every((user) => user._id !== id)) {\r\n      try {\r\n        dispatch({\r\n          type: PROFILE_TYPES.LOADING,\r\n          payload: true,\r\n        });\r\n        const res = await getDataAPI(`/user/${id}`, auth.token);\r\n        dispatch({\r\n          type: PROFILE_TYPES.GET_USER,\r\n          payload: res.data,\r\n        });\r\n        dispatch({\r\n          type: PROFILE_TYPES.LOADING,\r\n          payload: false,\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateProfileUser =\r\n  ({ userData, avatar, auth }) =>\r\n  async (dispatch) => {\r\n    if (!userData.fullname)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Please add your full name\" },\r\n      });\r\n    if (userData.fullname.length > 25)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your full name is too long\" },\r\n      });\r\n    if (userData.story.length > 200)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your story is too long\" },\r\n      });\r\n    try {\r\n      let media;\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { loading: true },\r\n      });\r\n      if (avatar) media = await imageUpload([avatar]);\r\n\r\n      const res = await patchDataAPI(\r\n        \"user\",\r\n        {\r\n          ...userData,\r\n          avatar: avatar ? media[0].url : auth.user.avatar,\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: {\r\n          ...auth,\r\n          user: {\r\n            ...auth.user,\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar,\r\n          },\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const changePasswordUser = ({ userData, auth }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const followAction = ({ users, user, auth }) => {\r\n  return async (dispatch) => {\r\n    let newUser = { ...user, followers: [...user.followers, auth.user] };\r\n    dispatch({\r\n      type: PROFILE_TYPES.FOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, following: [...auth.user.following, newUser] },\r\n      },\r\n    });\r\n  };\r\n};\r\n\r\nexport const unFollowAction = ({ users, user, auth }) => {\r\n  return async (dispatch) => {\r\n    let newUser = {\r\n      ...user,\r\n      followers: deleteData(user.followers, auth.user._id),\r\n    };\r\n    console.log(newUser);\r\n    dispatch({\r\n      type: PROFILE_TYPES.UNFOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: {\r\n          ...auth.user,\r\n          following: deleteData(auth.user.following, newUser._id),\r\n        },\r\n      },\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}