{"ast":null,"code":"import { deleteDataAPI, getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { deleteData } from \"../types/globalTypes\";\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nexport const addUserAction = ({\n  user,\n  message\n}) => {\n  return async dispatch => {\n    if (message.users.every(item => item._id !== user._id)) {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: user\n      });\n    }\n  };\n};\nexport const addMessageAction = ({\n  msg,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    const {\n      _id,\n      avatar,\n      fullname,\n      username\n    } = auth.user;\n    socket.emit(\"addMessage\", { ...msg,\n      user: {\n        _id,\n        avatar,\n        fullname,\n        username\n      }\n    });\n\n    try {\n      await postDataAPI(\"message\", msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = ({\n  auth,\n  page = 1\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media,\n              call: item.call\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessagesAction = ({\n  auth,\n  id,\n  page = 1\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESSAGE_TYPES.GET_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMoreMessagesAction = ({\n  auth,\n  id,\n  page = 1\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESSAGE_TYPES.UPDATE_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteMessageAction = ({\n  msg,\n  data,\n  auth\n}) => {\n  return async dispatch => {\n    const newData = deleteData(data, msg._id);\n    dispatch({\n      type: MESSAGE_TYPES.DELETE_MESSAGES,\n      payload: {\n        newData,\n        _id: msg.recipient\n      }\n    });\n\n    try {\n      await deleteDataAPI(`message/${msg._id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteConversationAction = ({\n  auth,\n  id\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: MESSAGE_TYPES.DELETE_CONVERSATION,\n      payload: id\n    });\n\n    try {\n      await deleteDataAPI(`conversation/${id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/messageActions.js"],"names":["deleteDataAPI","getDataAPI","postDataAPI","deleteData","MESSAGE_TYPES","NOTIFY_TYPES","addUserAction","user","message","dispatch","users","every","item","_id","type","ADD_USER","payload","addMessageAction","msg","auth","socket","ADD_MESSAGE","avatar","fullname","username","emit","token","err","NOTIFY","error","response","data","getConversations","page","res","newArr","conversations","forEach","recipients","cv","push","text","media","call","GET_CONVERSATIONS","result","getMessagesAction","id","newData","messages","reverse","GET_MESSAGES","getMoreMessagesAction","UPDATE_MESSAGES","deleteMessageAction","DELETE_MESSAGES","recipient","deleteConversationAction","DELETE_CONVERSATION"],"mappings":"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","sourcesContent":["import { deleteDataAPI, getDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { deleteData } from \"../types/globalTypes\";\r\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const addUserAction = ({ user, message }) => {\r\n  return async (dispatch) => {\r\n    if (message.users.every((item) => item._id !== user._id)) {\r\n      dispatch({\r\n        type: MESSAGE_TYPES.ADD_USER,\r\n        payload: user,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addMessageAction = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: MESSAGE_TYPES.ADD_MESSAGE,\r\n      payload: msg,\r\n    });\r\n\r\n    const { _id, avatar, fullname, username } = auth.user;\r\n\r\n    socket.emit(\"addMessage\", {\r\n      ...msg,\r\n      user: { _id, avatar, fullname, username },\r\n    });\r\n\r\n    try {\r\n      await postDataAPI(\"message\", msg, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getConversations = ({ auth, page = 1 }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `conversations?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n      let newArr = [];\r\n\r\n      res.data.conversations.forEach((item) => {\r\n        item.recipients.forEach((cv) => {\r\n          if (cv._id !== auth.user._id) {\r\n            newArr.push({\r\n              ...cv,\r\n              text: item.text,\r\n              media: item.media,\r\n              call: item.call,\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      dispatch({\r\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMessagesAction = ({ auth, id, page = 1 }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `message/${id}?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n\r\n      const newData = { ...res.data, messages: res.data.messages.reverse() };\r\n\r\n      dispatch({\r\n        type: MESSAGE_TYPES.GET_MESSAGES,\r\n        payload: { ...newData, _id: id, page },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMoreMessagesAction = ({ auth, id, page = 1 }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `message/${id}?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n      const newData = { ...res.data, messages: res.data.messages.reverse() };\r\n\r\n      dispatch({\r\n        type: MESSAGE_TYPES.UPDATE_MESSAGES,\r\n        payload: { ...newData, _id: id, page },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteMessageAction = ({ msg, data, auth }) => {\r\n  return async (dispatch) => {\r\n    const newData = deleteData(data, msg._id);\r\n\r\n    dispatch({\r\n      type: MESSAGE_TYPES.DELETE_MESSAGES,\r\n      payload: { newData, _id: msg.recipient },\r\n    });\r\n\r\n    try {\r\n      await deleteDataAPI(`message/${msg._id}`, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteConversationAction = ({ auth, id }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: MESSAGE_TYPES.DELETE_CONVERSATION,\r\n      payload: id,\r\n    });\r\n\r\n    try {\r\n      await deleteDataAPI(`conversation/${id}`, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}