{"ast":null,"code":"import { deleteDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { deleteData, editData } from \"../types/globalTypes\";\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\nexport const createCommentAction = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n      socket.emit(\"createComment\", newPost); // Notify\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? \"mentioned you in a comment.\" : \"has commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateCommentAction = ({\n  comment,\n  post,\n  content,\n  auth\n}) => {\n  return async dispatch => {\n    const newComments = editData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: deleteData(comment.likes, auth.user._id)\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteCommentAction = ({\n  post,\n  auth,\n  comment,\n  socket\n}) => {\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"deleteComment\", newPost);\n\n    try {\n      deleteArr.forEach(async item => {\n        await deleteDataAPI(`comment/${item._id}`, auth.token); // Notify\n\n        const msg = {\n          id: item._id,\n          text: comment.reply ? \"mentioned you in a comment.\" : \"has commented on your post.\",\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNewsNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/commentActions.js"],"names":["deleteDataAPI","patchDataAPI","postDataAPI","NOTIFY_TYPES","POST_TYPES","deleteData","editData","createNewsNotify","removeNewsNotify","createCommentAction","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","NOTIFY","error","response","updateCommentAction","comment","newComments","likeCommentAction","likes","unLikeCommentAction","deleteCommentAction","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { deleteData, editData } from \"../types/globalTypes\";\r\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\r\nexport const createCommentAction = ({ post, newComment, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n      socket.emit(\"createComment\", newPost);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? \"mentioned you in a comment.\"\r\n          : \"has commented on your post.\",\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentAction = ({ comment, post, content, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComments = editData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: deleteData(comment.likes, auth.user._id),\r\n    };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteCommentAction = ({ post, auth, comment, socket }) => {\r\n  return async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    socket.emit(\"deleteComment\", newPost);\r\n    try {\r\n      deleteArr.forEach(async (item) => {\r\n        await deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n        // Notify\r\n        const msg = {\r\n          id: item._id,\r\n          text: comment.reply\r\n            ? \"mentioned you in a comment.\"\r\n            : \"has commented on your post.\",\r\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n          url: `/post/${post._id}`,\r\n        };\r\n\r\n        dispatch(removeNewsNotify({ msg, auth, socket }));\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}