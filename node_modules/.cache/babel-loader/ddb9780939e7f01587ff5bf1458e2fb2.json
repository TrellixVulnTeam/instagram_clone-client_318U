{"ast":null,"code":"var _jsxFileName = \"C:\\\\Benkia\\\\MERN\\\\instagram-clone\\\\client\\\\src\\\\components\\\\Comments\\\\InputComment\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createCommentAction } from \"../../../redux/actions/commentActions\";\nimport { STATUS_TYPES } from \"../../../redux/types/statusTypes\";\nimport Icons from \"../../Icons\";\nimport \"./index.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst InputComment = ({\n  children,\n  post,\n  onReply,\n  setOnReply\n}) => {\n  _s();\n\n  const {\n    auth,\n    socket,\n    input\n  } = useSelector(state => state);\n  const [content, setContent] = useState(\"\");\n  const [isReply, setIsReply] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (input.content) {\n      setIsReply(input);\n    } else {\n      setIsReply(false);\n    }\n  }, [input]);\n  console.log(input);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!content.trim()) {\n      if (setOnReply) return setOnReply(false);\n      return;\n    }\n\n    const newComment = {\n      content,\n      likes: [],\n      user: auth.user,\n      createdAt: new Date().toISOString(),\n      reply: onReply && onReply.commentId,\n      tag: onReply && onReply.user\n    };\n    const test = {\n      content,\n      likes: [],\n      user: auth.user,\n      createdAt: new Date().toISOString(),\n      reply: input === false ? undefined : input.commentId,\n      tag: input === false ? undefined : input.user\n    };\n    console.log(input);\n    console.log(test);\n    console.log(newComment); // dispatch(createCommentAction({ post, newComment, auth, socket }));\n\n    if (setOnReply) return setOnReply(false);\n    if (input) dispatch({\n      type: STATUS_TYPES.ON_REPLY,\n      payload: false\n    });\n    setContent(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-comments\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"input-form\",\n        onSubmit: handleSubmit,\n        children: [children, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-comment\",\n          value: content,\n          onChange: e => setContent(e.target.value),\n          placeholder: \"Add a comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-icons\",\n          children: /*#__PURE__*/_jsxDEV(Icons, {\n            setContent: setContent,\n            content: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"input-btn\",\n          disabled: content ? false : true,\n          style: {\n            opacity: content ? 1 : 0.5\n          },\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(InputComment, \"IjZdvhQ06hx2zCTzFfPfXexOkY4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = InputComment;\nexport default InputComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputComment\");","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/components/Comments/InputComment/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","createCommentAction","STATUS_TYPES","Icons","InputComment","children","post","onReply","setOnReply","auth","socket","input","state","content","setContent","isReply","setIsReply","dispatch","console","log","handleSubmit","e","preventDefault","trim","newComment","likes","user","createdAt","Date","toISOString","reply","commentId","tag","test","undefined","type","ON_REPLY","payload","target","value","opacity"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createCommentAction } from \"../../../redux/actions/commentActions\";\r\nimport { STATUS_TYPES } from \"../../../redux/types/statusTypes\";\r\nimport Icons from \"../../Icons\";\r\nimport \"./index.scss\";\r\nconst InputComment = ({ children, post, onReply, setOnReply }) => {\r\n  const { auth, socket, input } = useSelector((state) => state);\r\n  const [content, setContent] = useState(\"\");\r\n  const [isReply, setIsReply] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (input.content) {\r\n      setIsReply(input);\r\n    } else {\r\n      setIsReply(false);\r\n    }\r\n  }, [input]);\r\n\r\n  console.log(input);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!content.trim()) {\r\n      if (setOnReply) return setOnReply(false);\r\n      return;\r\n    }\r\n\r\n    const newComment = {\r\n      content,\r\n      likes: [],\r\n      user: auth.user,\r\n      createdAt: new Date().toISOString(),\r\n      reply: onReply && onReply.commentId,\r\n      tag: onReply && onReply.user,\r\n    };\r\n\r\n    const test = {\r\n      content,\r\n      likes: [],\r\n      user: auth.user,\r\n      createdAt: new Date().toISOString(),\r\n      reply: input === false ? undefined : input.commentId,\r\n      tag: input === false ? undefined : input.user,\r\n    };\r\n    console.log(input);\r\n    console.log(test);\r\n    console.log(newComment);\r\n\r\n    // dispatch(createCommentAction({ post, newComment, auth, socket }));\r\n    if (setOnReply) return setOnReply(false);\r\n    if (input)\r\n      dispatch({\r\n        type: STATUS_TYPES.ON_REPLY,\r\n        payload: false,\r\n      });\r\n\r\n    setContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"input-comments\">\r\n        <form className=\"input-form\" onSubmit={handleSubmit}>\r\n          {children}\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-comment\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n            placeholder=\"Add a comment...\"\r\n          />\r\n\r\n          <div className=\"input-icons\">\r\n            <Icons setContent={setContent} content={content} />\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"input-btn\"\r\n            disabled={content ? false : true}\r\n            style={{ opacity: content ? 1 : 0.5 }}\r\n          >\r\n            Post\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputComment;\r\n"]},"metadata":{},"sourceType":"module"}