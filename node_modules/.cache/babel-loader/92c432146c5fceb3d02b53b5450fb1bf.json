{"ast":null,"code":"import { deleteDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { deleteData, editData } from \"../types/globalTypes\";\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\nexport const createCommentAction = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    console.log(newPost); // dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    // try {\n    //   const data = {\n    //     ...newComment,\n    //     postId: post._id,\n    //     postUserId: post.user._id,\n    //   };\n    //   const res = await postDataAPI(\"comment\", data, auth.token);\n    //   const newData = { ...res.data.newComment, user: auth.user };\n    //   const newPost = { ...post, comments: [...post.comments, newData] };\n    //   dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    //   socket.emit(\"createComment\", newPost);\n    //   // Notify\n    //   const msg = {\n    //     id: res.data.newComment._id,\n    //     text: newComment.reply\n    //       ? \"mentioned you in a comment.\"\n    //       : \"has commented on your post.\",\n    //     recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n    //     url: `/post/${post._id}`,\n    //     content: post.content,\n    //     image: post.images[0].url,\n    //   };\n    //   dispatch(createNewsNotify({ msg, auth, socket }));\n    // } catch (err) {\n    //   dispatch({\n    //     type: NOTIFY_TYPES.NOTIFY,\n    //     payload: { error: err.response.data.msg },\n    //   });\n    // }\n  };\n};\nexport const updateCommentAction = ({\n  comment,\n  post,\n  content,\n  auth\n}) => {\n  return async dispatch => {\n    const newComments = editData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: deleteData(comment.likes, auth.user._id)\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteCommentAction = ({\n  post,\n  auth,\n  comment,\n  socket\n}) => {\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"deleteComment\", newPost);\n\n    try {\n      deleteArr.forEach(async item => {\n        await deleteDataAPI(`comment/${item._id}`, auth.token); // Notify\n\n        const msg = {\n          id: item._id,\n          text: comment.reply ? \"mentioned you in a comment.\" : \"has commented on your post.\",\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNewsNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/commentActions.js"],"names":["deleteDataAPI","patchDataAPI","postDataAPI","NOTIFY_TYPES","POST_TYPES","deleteData","editData","createNewsNotify","removeNewsNotify","createCommentAction","post","newComment","auth","socket","dispatch","newPost","comments","console","log","updateCommentAction","comment","content","newComments","_id","type","UPDATE_POST","payload","token","err","NOTIFY","error","response","data","msg","likeCommentAction","likes","user","unLikeCommentAction","deleteCommentAction","deleteArr","filter","cm","reply","find","da","emit","forEach","item","id","text","recipients","tag","url"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { deleteData, editData } from \"../types/globalTypes\";\r\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\r\nexport const createCommentAction = ({ post, newComment, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n    console.log(newPost);\r\n    // dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    // try {\r\n    //   const data = {\r\n    //     ...newComment,\r\n    //     postId: post._id,\r\n    //     postUserId: post.user._id,\r\n    //   };\r\n    //   const res = await postDataAPI(\"comment\", data, auth.token);\r\n\r\n    //   const newData = { ...res.data.newComment, user: auth.user };\r\n    //   const newPost = { ...post, comments: [...post.comments, newData] };\r\n    //   dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    //   socket.emit(\"createComment\", newPost);\r\n\r\n    //   // Notify\r\n    //   const msg = {\r\n    //     id: res.data.newComment._id,\r\n    //     text: newComment.reply\r\n    //       ? \"mentioned you in a comment.\"\r\n    //       : \"has commented on your post.\",\r\n    //     recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n    //     url: `/post/${post._id}`,\r\n    //     content: post.content,\r\n    //     image: post.images[0].url,\r\n    //   };\r\n\r\n    //   dispatch(createNewsNotify({ msg, auth, socket }));\r\n    // } catch (err) {\r\n    //   dispatch({\r\n    //     type: NOTIFY_TYPES.NOTIFY,\r\n    //     payload: { error: err.response.data.msg },\r\n    //   });\r\n    // }\r\n  };\r\n};\r\n\r\nexport const updateCommentAction = ({ comment, post, content, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComments = editData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: deleteData(comment.likes, auth.user._id),\r\n    };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteCommentAction = ({ post, auth, comment, socket }) => {\r\n  return async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    socket.emit(\"deleteComment\", newPost);\r\n    try {\r\n      deleteArr.forEach(async (item) => {\r\n        await deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n        // Notify\r\n        const msg = {\r\n          id: item._id,\r\n          text: comment.reply\r\n            ? \"mentioned you in a comment.\"\r\n            : \"has commented on your post.\",\r\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n          url: `/post/${post._id}`,\r\n        };\r\n\r\n        dispatch(removeNewsNotify({ msg, auth, socket }));\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}