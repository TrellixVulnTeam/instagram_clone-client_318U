{"ast":null,"code":"import { editData } from \"../types/globalTypes\";\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\nconst initialState = {\n  users: [],\n  resultUsers: 0,\n  data: [],\n  firstLoad: false\n};\n\nconst messageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case MESSAGE_TYPES.ADD_USER:\n      return { ...state,\n        users: [action.payload, ...state.users]\n      };\n\n    case MESSAGE_TYPES.ADD_MESSAGE:\n      return { ...state,\n        data: state.data.map(item => item._id === action.payload.recipient || item._id === action.payload.sender ? { ...item,\n          messages: [...item.messages, action.payload],\n          result: item.result + 1\n        } : item),\n        users: state.users.map(user => user._id === action.payload.recipient || user._id === action.payload.sender ? { ...user,\n          text: action.payload.text,\n          media: action.payload.media\n        } : user)\n      };\n\n    case MESSAGE_TYPES.GET_CONVERSATIONS:\n      return { ...state,\n        users: action.payload.newArr,\n        resultUsers: action.payload.result,\n        firstLoad: true\n      };\n\n    case MESSAGE_TYPES.GET_MESSAGES:\n      return { ...state,\n        data: [...state.data, action.payload]\n      };\n\n    case MESSAGE_TYPES.UPDATE_MESSAGES:\n      console.log(action.payload);\n      return { ...state,\n        data: editData(state.data, action.payload._id, action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/reducers/messageReducer.js"],"names":["editData","MESSAGE_TYPES","initialState","users","resultUsers","data","firstLoad","messageReducer","state","action","type","ADD_USER","payload","ADD_MESSAGE","map","item","_id","recipient","sender","messages","result","user","text","media","GET_CONVERSATIONS","newArr","GET_MESSAGES","UPDATE_MESSAGES","console","log"],"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,WAAW,EAAE,CAFM;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB;;AAOA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,aAAa,CAACU,QAAnB;AACE,aAAO,EACL,GAAGH,KADE;AAELL,QAAAA,KAAK,EAAE,CAACM,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACL,KAA1B;AAFF,OAAP;;AAIF,SAAKF,aAAa,CAACY,WAAnB;AACE,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWS,GAAX,CAAgBC,IAAD,IACnBA,IAAI,CAACC,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeK,SAA5B,IACAF,IAAI,CAACC,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeM,MAD5B,GAEI,EACE,GAAGH,IADL;AAEEI,UAAAA,QAAQ,EAAE,CAAC,GAAGJ,IAAI,CAACI,QAAT,EAAmBV,MAAM,CAACG,OAA1B,CAFZ;AAGEQ,UAAAA,MAAM,EAAEL,IAAI,CAACK,MAAL,GAAc;AAHxB,SAFJ,GAOIL,IARA,CAFD;AAYLZ,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYW,GAAZ,CAAiBO,IAAD,IACrBA,IAAI,CAACL,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeK,SAA5B,IACAI,IAAI,CAACL,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeM,MAD5B,GAEI,EACE,GAAGG,IADL;AAEEC,UAAAA,IAAI,EAAEb,MAAM,CAACG,OAAP,CAAeU,IAFvB;AAGEC,UAAAA,KAAK,EAAEd,MAAM,CAACG,OAAP,CAAeW;AAHxB,SAFJ,GAOIF,IARC;AAZF,OAAP;;AAuBF,SAAKpB,aAAa,CAACuB,iBAAnB;AACE,aAAO,EACL,GAAGhB,KADE;AAELL,QAAAA,KAAK,EAAEM,MAAM,CAACG,OAAP,CAAea,MAFjB;AAGLrB,QAAAA,WAAW,EAAEK,MAAM,CAACG,OAAP,CAAeQ,MAHvB;AAILd,QAAAA,SAAS,EAAE;AAJN,OAAP;;AAMF,SAAKL,aAAa,CAACyB,YAAnB;AACE,aAAO,EACL,GAAGlB,KADE;AAELH,QAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgBI,MAAM,CAACG,OAAvB;AAFD,OAAP;;AAIF,SAAKX,aAAa,CAAC0B,eAAnB;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAM,CAACG,OAAnB;AACA,aAAO,EACL,GAAGJ,KADE;AAELH,QAAAA,IAAI,EAAEL,QAAQ,CAACQ,KAAK,CAACH,IAAP,EAAaI,MAAM,CAACG,OAAP,CAAeI,GAA5B,EAAiCP,MAAM,CAACG,OAAxC;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAjDJ;AAmDD,CApDD;;AAsDA,eAAeD,cAAf","sourcesContent":["import { editData } from \"../types/globalTypes\";\r\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\r\n\r\nconst initialState = {\r\n  users: [],\r\n  resultUsers: 0,\r\n  data: [],\r\n  firstLoad: false,\r\n};\r\n\r\nconst messageReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MESSAGE_TYPES.ADD_USER:\r\n      return {\r\n        ...state,\r\n        users: [action.payload, ...state.users],\r\n      };\r\n    case MESSAGE_TYPES.ADD_MESSAGE:\r\n      return {\r\n        ...state,\r\n        data: state.data.map((item) =>\r\n          item._id === action.payload.recipient ||\r\n          item._id === action.payload.sender\r\n            ? {\r\n                ...item,\r\n                messages: [...item.messages, action.payload],\r\n                result: item.result + 1,\r\n              }\r\n            : item\r\n        ),\r\n        users: state.users.map((user) =>\r\n          user._id === action.payload.recipient ||\r\n          user._id === action.payload.sender\r\n            ? {\r\n                ...user,\r\n                text: action.payload.text,\r\n                media: action.payload.media,\r\n              }\r\n            : user\r\n        ),\r\n      };\r\n    case MESSAGE_TYPES.GET_CONVERSATIONS:\r\n      return {\r\n        ...state,\r\n        users: action.payload.newArr,\r\n        resultUsers: action.payload.result,\r\n        firstLoad: true,\r\n      };\r\n    case MESSAGE_TYPES.GET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        data: [...state.data, action.payload],\r\n      };\r\n    case MESSAGE_TYPES.UPDATE_MESSAGES:\r\n      console.log(action.payload);\r\n      return {\r\n        ...state,\r\n        data: editData(state.data, action.payload._id, action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messageReducer;\r\n"]},"metadata":{},"sourceType":"module"}