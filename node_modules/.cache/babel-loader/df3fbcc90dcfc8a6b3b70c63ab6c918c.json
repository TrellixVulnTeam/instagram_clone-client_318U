{"ast":null,"code":"import { patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { editData } from \"../types/globalTypes\";\nexport const createCommentAction = ({\n  post,\n  newComment,\n  auth\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateCommentAction = ({\n  comment,\n  post,\n  content,\n  auth\n}) => {\n  return async dispatch => {\n    const newComments = editData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    console.log({\n      comment,\n      newComment\n    });\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/commentActions.js"],"names":["patchDataAPI","postDataAPI","NOTIFY_TYPES","POST_TYPES","editData","createCommentAction","post","newComment","auth","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","res","token","newData","user","err","NOTIFY","error","response","msg","updateCommentAction","comment","content","newComments","likeCommentAction","likes","console","log"],"mappings":"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","sourcesContent":["import { patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { editData } from \"../types/globalTypes\";\r\nexport const createCommentAction = ({ post, newComment, auth }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      const data = { ...newComment, postId: post._id };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n      const newData = {\r\n        ...res.data.newComment,\r\n        user: auth.user,\r\n      };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentAction = ({ comment, post, content, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComments = editData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    console.log({ comment, newComment });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}