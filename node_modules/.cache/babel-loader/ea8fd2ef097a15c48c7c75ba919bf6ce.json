{"ast":null,"code":"import { deleteDataAPI, getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NEW_TYPES } from \"../types/newTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nexport const createNewsNotify = ({\n  msg,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    try {\n      const res = await postDataAPI(\"notify\", msg, auth.token);\n      socket.emit(\"createNotify\", { ...res.data.notify,\n        user: {\n          username: auth.user.username,\n          avatar: auth.user.avatar,\n          _id: auth.user._id\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const removeNewsNotify = ({\n  msg,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    try {\n      const res = await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\n      console.log(res);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getNewsNotifies = token => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(\"notifies\", token);\n      dispatch({\n        type: NEW_TYPES.GET_NOTIFIES,\n        payload: res.data.notifies\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/newsActions.js"],"names":["deleteDataAPI","getDataAPI","patchDataAPI","postDataAPI","NEW_TYPES","NOTIFY_TYPES","createNewsNotify","msg","auth","socket","dispatch","res","token","emit","data","notify","user","username","avatar","_id","err","type","NOTIFY","payload","error","response","removeNewsNotify","id","url","console","log","getNewsNotifies","GET_NOTIFIES","notifies"],"mappings":"AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,WAJF,QAKO,uBALP;AAMA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA2B;AACzD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMR,WAAW,CAAC,QAAD,EAAWI,GAAX,EAAgBC,IAAI,CAACI,KAArB,CAA7B;AACAH,MAAAA,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA4B,EAC1B,GAAGF,GAAG,CAACG,IAAJ,CAASC,MADc;AAE1BC,QAAAA,IAAI,EAAE;AACJC,UAAAA,QAAQ,EAAET,IAAI,CAACQ,IAAL,CAAUC,QADhB;AAEJC,UAAAA,MAAM,EAAEV,IAAI,CAACQ,IAAL,CAAUE,MAFd;AAGJC,UAAAA,GAAG,EAAEX,IAAI,CAACQ,IAAL,CAAUG;AAHX;AAFoB,OAA5B;AAQD,KAVD,CAUE,OAAOC,GAAP,EAAY;AACZV,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEhB,YAAY,CAACiB,MADZ;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEJ,GAAG,CAACK,QAAJ,CAAaX,IAAb,CAAkBP;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMmB,gBAAgB,GAAG,CAAC;AAAEnB,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA2B;AACzD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMX,aAAa,CAC5B,UAASO,GAAG,CAACoB,EAAG,QAAOpB,GAAG,CAACqB,GAAI,EADH,EAE7BpB,IAAI,CAACI,KAFwB,CAA/B;AAIAiB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,GAAZ;AACD,KAND,CAME,OAAOS,GAAP,EAAY;AACZV,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEhB,YAAY,CAACiB,MADZ;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEJ,GAAG,CAACK,QAAJ,CAAaX,IAAb,CAAkBP;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMwB,eAAe,GAAInB,KAAD,IAAW;AACxC,SAAO,MAAOF,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMV,UAAU,CAAC,UAAD,EAAaW,KAAb,CAA5B;AACAF,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEjB,SAAS,CAAC4B,YADT;AAEPT,QAAAA,OAAO,EAAEZ,GAAG,CAACG,IAAJ,CAASmB;AAFX,OAAD,CAAR;AAID,KAND,CAME,OAAOb,GAAP,EAAY;AACZV,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEhB,YAAY,CAACiB,MADZ;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEJ,GAAG,CAACK,QAAJ,CAAaX,IAAb,CAAkBP;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAbD;AAcD,CAfM","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { NEW_TYPES } from \"../types/newTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const createNewsNotify = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await postDataAPI(\"notify\", msg, auth.token);\r\n      socket.emit(\"createNotify\", {\r\n        ...res.data.notify,\r\n        user: {\r\n          username: auth.user.username,\r\n          avatar: auth.user.avatar,\r\n          _id: auth.user._id,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeNewsNotify = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await deleteDataAPI(\r\n        `notify/${msg.id}?url=${msg.url}`,\r\n        auth.token\r\n      );\r\n      console.log(res);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getNewsNotifies = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\"notifies\", token);\r\n      dispatch({\r\n        type: NEW_TYPES.GET_NOTIFIES,\r\n        payload: res.data.notifies,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}