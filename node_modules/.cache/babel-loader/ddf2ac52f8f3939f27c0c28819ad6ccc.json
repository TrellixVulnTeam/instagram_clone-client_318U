{"ast":null,"code":"import { deleteDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { deleteData, editData } from \"../types/globalTypes\";\nimport { createNewsNotify } from \"./newsActions\";\nexport const createCommentAction = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n      console.log(auth);\n      console.log(newData);\n      console.log(newPost); // socket.emit(\"createComment\", newPost);\n      // console.log(res);\n      // Notify\n      // const msg = {\n      //   id: res.data.newComment._id,\n      //   text: newComment.reply\n      //     ? \"mentioned you in a comment.\"\n      //     : \"has commented on your post.\",\n      //   recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      //   url: `/post/${post._id}`,\n      //   content: post.content,\n      //   image: post.images[0].url,\n      // };\n      // dispatch(createNewsNotify({ msg, auth, socket }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateCommentAction = ({\n  comment,\n  post,\n  content,\n  auth\n}) => {\n  return async dispatch => {\n    const newComments = editData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: deleteData(comment.likes, auth.user._id)\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteCommentAction = ({\n  post,\n  auth,\n  comment,\n  socket\n}) => {\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      deleteArr.forEach(async item => {\n        await deleteDataAPI(`comment/${item._id}`, auth.token);\n      });\n      socket.emit(\"deleteComment\", newPost);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/commentActions.js"],"names":["deleteDataAPI","patchDataAPI","postDataAPI","NOTIFY_TYPES","POST_TYPES","deleteData","editData","createNewsNotify","createCommentAction","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","console","log","err","NOTIFY","error","response","msg","updateCommentAction","comment","content","newComments","likeCommentAction","likes","unLikeCommentAction","deleteCommentAction","deleteArr","filter","cm","reply","find","da","forEach","item","emit"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { deleteData, editData } from \"../types/globalTypes\";\r\nimport { createNewsNotify } from \"./newsActions\";\r\nexport const createCommentAction = ({ post, newComment, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n      const newData = {\r\n        ...res.data.newComment,\r\n        user: auth.user,\r\n      };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n      console.log(auth);\r\n      console.log(newData);\r\n      console.log(newPost);\r\n      // socket.emit(\"createComment\", newPost);\r\n\r\n      // console.log(res);\r\n\r\n      // Notify\r\n      // const msg = {\r\n      //   id: res.data.newComment._id,\r\n      //   text: newComment.reply\r\n      //     ? \"mentioned you in a comment.\"\r\n      //     : \"has commented on your post.\",\r\n      //   recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n      //   url: `/post/${post._id}`,\r\n      //   content: post.content,\r\n      //   image: post.images[0].url,\r\n      // };\r\n\r\n      // dispatch(createNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentAction = ({ comment, post, content, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComments = editData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: deleteData(comment.likes, auth.user._id),\r\n    };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteCommentAction = ({ post, auth, comment, socket }) => {\r\n  return async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      deleteArr.forEach(async (item) => {\r\n        await deleteDataAPI(`comment/${item._id}`, auth.token);\r\n      });\r\n      socket.emit(\"deleteComment\", newPost);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}