{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AUTH_TYPES } from \"./redux/types/authTypes\";\nimport { MESSAGE_TYPES } from \"./redux/types/messageTypes\";\nimport { NEW_TYPES } from \"./redux/types/newTypes\";\nimport { POST_TYPES } from \"./redux/types/postTypes\";\nimport { PEER_TYPES } from \"./redux/types/peerTypes\";\nimport { CALL_TYPES } from \"./redux/types/callTypes\";\nimport { NOTIFY_TYPES } from \"./redux/types/notifyTypes\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SocketClient = () => {\n  _s();\n\n  const {\n    auth,\n    socket,\n    online,\n    call\n  } = useSelector(state => state);\n  const dispatch = useDispatch(); //connect user to socket io\n\n  useEffect(() => {\n    socket.emit(\"joinUser\", auth.user);\n  }, [socket, auth.user]); //   likes\n\n  useEffect(() => {\n    socket.on(\"likeToClient\", newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off(\"likeToClient\");\n  }, [socket, dispatch]); //  un likes\n\n  useEffect(() => {\n    socket.on(\"unLikeToClient\", newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off(\"unLikeToClient\");\n  }, [socket, dispatch]); //  Comments\n\n  useEffect(() => {\n    socket.on(\"createCommentToClient\", newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off(\"createCommentToClient\");\n  }, [socket, dispatch]); // delete  Comments\n\n  useEffect(() => {\n    socket.on(\"deleteCommentToClient\", newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off(\"deleteCommentToClient\");\n  }, [socket, dispatch]); // FOllow\n\n  useEffect(() => {\n    socket.on(\"followToClient\", newUser => {\n      dispatch({\n        type: AUTH_TYPES.AUTH,\n        payload: { ...auth,\n          user: newUser\n        }\n      });\n    });\n    return () => socket.off(\"followToClient\");\n  }, [socket, dispatch, auth]); //UnFollow\n\n  useEffect(() => {\n    socket.on(\"unFollowToClient\", newUser => {\n      dispatch({\n        type: AUTH_TYPES.AUTH,\n        payload: { ...auth,\n          user: newUser\n        }\n      });\n    });\n    return () => socket.off(\"unFollowToClient\");\n  }, [socket, dispatch, auth]); //create Notification\n\n  useEffect(() => {\n    socket.on(\"createNotifyToClient\", msg => {\n      dispatch({\n        type: NEW_TYPES.CREATE_NOTIFY,\n        payload: msg\n      });\n    });\n    return () => socket.off(\"createNotifyToClient\");\n  }, [socket, dispatch]); //remove Notification\n\n  useEffect(() => {\n    socket.on(\"removeNotifyToClient\", msg => {\n      dispatch({\n        type: NEW_TYPES.REMOVE_NOTIFY,\n        payload: msg\n      });\n    });\n    return () => socket.off(\"removeNotifyToClient\");\n  }, [socket, dispatch]); //Message\n\n  useEffect(() => {\n    socket.on(\"addMessageToClient\", msg => {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_MESSAGE,\n        payload: msg\n      });\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: { ...msg.user,\n          text: msg.text,\n          media: msg.media\n        }\n      });\n    });\n    return () => socket.off(\"addMessageToClient\");\n  }, [socket, dispatch]); // Check user Online/Offline\n  // online\n\n  useEffect(() => {\n    socket.emit(\"checkUserOnline\", auth.user);\n  }, [socket, auth.user]); //Online to me\n\n  useEffect(() => {\n    socket.on(\"checkUserOnlineToMe\", data => {\n      data.forEach(item => {\n        if (!online.includes(item.id)) {\n          dispatch({\n            type: AUTH_TYPES.ONLINE,\n            payload: item.id\n          });\n        }\n      });\n    });\n    return () => socket.off(\"checkUserOnlineToMe\");\n  }, [socket, dispatch, online]); // online to client\n\n  useEffect(() => {\n    socket.on(\"checkUserOnlineToClient\", id => {\n      if (!online.includes(id)) {\n        dispatch({\n          type: AUTH_TYPES.ONLINE,\n          payload: id\n        });\n      }\n    });\n    return () => socket.off(\"checkUserOnlineToClient\");\n  }, [socket, dispatch, online]); // Offline\n\n  useEffect(() => {\n    socket.on(\"CheckUserOffline\", id => {\n      dispatch({\n        type: AUTH_TYPES.OFFLINE,\n        payload: id\n      });\n    });\n    return () => socket.off(\"CheckUserOffline\");\n  }, [socket, dispatch, online]); // Call User\n\n  useEffect(() => {\n    socket.on(\"callUserToClient\", data => {\n      console.log(data);\n      dispatch({\n        type: CALL_TYPES.CALL,\n        payload: data\n      });\n    });\n    return () => socket.off(\"callUserToClient\");\n  }, [socket, dispatch, online]); // USER BUSY\n\n  useEffect(() => {\n    socket.on(\"userBusy\", data => {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: `${call.username} is busy`\n        }\n      });\n    });\n    return () => socket.off(\"userBusy\");\n  }, [socket, dispatch, call]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n};\n\n_s(SocketClient, \"BB3oGyQf4msBEgjFRkn9pxBuaIY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SocketClient;\nexport default SocketClient;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketClient\");","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/socketClient.js"],"names":["React","useEffect","useDispatch","useSelector","AUTH_TYPES","MESSAGE_TYPES","NEW_TYPES","POST_TYPES","PEER_TYPES","CALL_TYPES","NOTIFY_TYPES","SocketClient","auth","socket","online","call","state","dispatch","emit","user","on","newPost","type","UPDATE_POST","payload","off","newUser","AUTH","msg","CREATE_NOTIFY","REMOVE_NOTIFY","ADD_MESSAGE","ADD_USER","text","media","data","forEach","item","includes","id","ONLINE","OFFLINE","console","log","CALL","NOTIFY","error","username"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AUTH_TYPES } from \"./redux/types/authTypes\";\r\nimport { MESSAGE_TYPES } from \"./redux/types/messageTypes\";\r\nimport { NEW_TYPES } from \"./redux/types/newTypes\";\r\nimport { POST_TYPES } from \"./redux/types/postTypes\";\r\nimport { PEER_TYPES } from \"./redux/types/peerTypes\";\r\nimport { CALL_TYPES } from \"./redux/types/callTypes\";\r\nimport { NOTIFY_TYPES } from \"./redux/types/notifyTypes\";\r\nconst SocketClient = () => {\r\n  const { auth, socket, online, call } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  //connect user to socket io\r\n  useEffect(() => {\r\n    socket.emit(\"joinUser\", auth.user);\r\n  }, [socket, auth.user]);\r\n\r\n  //   likes\r\n  useEffect(() => {\r\n    socket.on(\"likeToClient\", (newPost) => {\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"likeToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  //  un likes\r\n  useEffect(() => {\r\n    socket.on(\"unLikeToClient\", (newPost) => {\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"unLikeToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  //  Comments\r\n  useEffect(() => {\r\n    socket.on(\"createCommentToClient\", (newPost) => {\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"createCommentToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  // delete  Comments\r\n  useEffect(() => {\r\n    socket.on(\"deleteCommentToClient\", (newPost) => {\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"deleteCommentToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  // FOllow\r\n  useEffect(() => {\r\n    socket.on(\"followToClient\", (newUser) => {\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: { ...auth, user: newUser },\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"followToClient\");\r\n  }, [socket, dispatch, auth]);\r\n\r\n  //UnFollow\r\n  useEffect(() => {\r\n    socket.on(\"unFollowToClient\", (newUser) => {\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: { ...auth, user: newUser },\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"unFollowToClient\");\r\n  }, [socket, dispatch, auth]);\r\n\r\n  //create Notification\r\n  useEffect(() => {\r\n    socket.on(\"createNotifyToClient\", (msg) => {\r\n      dispatch({\r\n        type: NEW_TYPES.CREATE_NOTIFY,\r\n        payload: msg,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"createNotifyToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  //remove Notification\r\n  useEffect(() => {\r\n    socket.on(\"removeNotifyToClient\", (msg) => {\r\n      dispatch({\r\n        type: NEW_TYPES.REMOVE_NOTIFY,\r\n        payload: msg,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"removeNotifyToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  //Message\r\n  useEffect(() => {\r\n    socket.on(\"addMessageToClient\", (msg) => {\r\n      dispatch({\r\n        type: MESSAGE_TYPES.ADD_MESSAGE,\r\n        payload: msg,\r\n      });\r\n\r\n      dispatch({\r\n        type: MESSAGE_TYPES.ADD_USER,\r\n        payload: { ...msg.user, text: msg.text, media: msg.media },\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"addMessageToClient\");\r\n  }, [socket, dispatch]);\r\n\r\n  // Check user Online/Offline\r\n  // online\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"checkUserOnline\", auth.user);\r\n  }, [socket, auth.user]);\r\n\r\n  //Online to me\r\n  useEffect(() => {\r\n    socket.on(\"checkUserOnlineToMe\", (data) => {\r\n      data.forEach((item) => {\r\n        if (!online.includes(item.id)) {\r\n          dispatch({\r\n            type: AUTH_TYPES.ONLINE,\r\n            payload: item.id,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"checkUserOnlineToMe\");\r\n  }, [socket, dispatch, online]);\r\n\r\n  // online to client\r\n\r\n  useEffect(() => {\r\n    socket.on(\"checkUserOnlineToClient\", (id) => {\r\n      if (!online.includes(id)) {\r\n        dispatch({\r\n          type: AUTH_TYPES.ONLINE,\r\n          payload: id,\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => socket.off(\"checkUserOnlineToClient\");\r\n  }, [socket, dispatch, online]);\r\n\r\n  // Offline\r\n\r\n  useEffect(() => {\r\n    socket.on(\"CheckUserOffline\", (id) => {\r\n      dispatch({\r\n        type: AUTH_TYPES.OFFLINE,\r\n        payload: id,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"CheckUserOffline\");\r\n  }, [socket, dispatch, online]);\r\n\r\n  // Call User\r\n\r\n  useEffect(() => {\r\n    socket.on(\"callUserToClient\", (data) => {\r\n      console.log(data);\r\n      dispatch({\r\n        type: CALL_TYPES.CALL,\r\n        payload: data,\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"callUserToClient\");\r\n  }, [socket, dispatch, online]);\r\n\r\n  // USER BUSY\r\n  useEffect(() => {\r\n    socket.on(\"userBusy\", (data) => {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: `${call.username} is busy` },\r\n      });\r\n    });\r\n\r\n    return () => socket.off(\"userBusy\");\r\n  }, [socket, dispatch, call]);\r\n\r\n  return <> </>;\r\n};\r\n\r\nexport default SocketClient;\r\n"]},"metadata":{},"sourceType":"module"}