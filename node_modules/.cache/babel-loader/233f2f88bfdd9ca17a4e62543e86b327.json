{"ast":null,"code":"import { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { POST_TYPES } from \"../types/postTypes\";\nexport const createPostAction = ({\n  content,\n  images,\n  auth\n}) => {\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (images.length > 0) media = await imageUpload(images);\n      const res = await postDataAPI(\"posts\", {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: { ...res.data.newPost,\n          user: auth.user\n        }\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updatePostAction = ({\n  content,\n  images,\n  auth,\n  status\n}) => {\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) return;\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n      const res = await patchDataAPI(`post/${status._id}`, {\n        content,\n        images: [...imgOldUrl, ...media]\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: true\n      });\n      const res = await getDataAPI(\"posts\", token);\n      dispatch({\n        type: POST_TYPES.GET_POSTS,\n        payload: { ...res.data,\n          page: 2\n        }\n      });\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: [...post.likes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: res.data.msg\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: res.data.msg\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPostDetail = ({\n  detailPost,\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    if (detailPost.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.post\n        });\n      } catch (err) {\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/postActions.js"],"names":["NOTIFY_TYPES","imageUpload","getDataAPI","patchDataAPI","postDataAPI","POST_TYPES","createPostAction","content","images","auth","dispatch","media","type","NOTIFY","payload","loading","length","res","token","CREATE_POST","data","newPost","user","err","error","response","msg","updatePostAction","status","imgNewUrl","filter","img","url","imgOldUrl","_id","UPDATE_POST","getPosts","LOADING_POST","GET_POSTS","page","likePostAction","post","likes","unLikePostAction","like","getPostDetail","detailPost","id","every","GET_POST"],"mappings":"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","sourcesContent":["import { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\n\r\nexport const createPostAction = ({ content, images, auth }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        \"posts\",\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: { ...res.data.newPost, user: auth.user },\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePostAction = ({ content, images, auth, status }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    const imgNewUrl = images.filter((img) => !img.url);\r\n    const imgOldUrl = images.filter((img) => img.url);\r\n\r\n    if (\r\n      status.content === content &&\r\n      imgNewUrl.length === 0 &&\r\n      imgOldUrl.length === status.images.length\r\n    )\r\n      return;\r\n\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\r\n\r\n      const res = await patchDataAPI(\r\n        `post/${status._id}`,\r\n        {\r\n          content,\r\n          images: [...imgOldUrl, ...media],\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: res.data.newPost,\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPosts = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n      const res = await getDataAPI(\"posts\", token);\r\n      dispatch({\r\n        type: POST_TYPES.GET_POSTS,\r\n        payload: { ...res.data, page: 2 },\r\n      });\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, likes: [...post.likes, auth.user] };\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      const res = await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: res.data.msg,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `post/${post._id}/unlike`,\r\n        null,\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: res.data.msg,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPostDetail = ({ detailPost, id, auth }) => {\r\n  return async (dispatch) => {\r\n    if (detailPost.every((post) => post._id !== id)) {\r\n      try {\r\n        const res = await getDataAPI(`post/${id}`, auth.token);\r\n        dispatch({\r\n          type: POST_TYPES.GET_POST,\r\n          payload: res.data.post,\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}