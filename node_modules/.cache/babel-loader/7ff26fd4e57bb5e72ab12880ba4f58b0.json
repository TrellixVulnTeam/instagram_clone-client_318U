{"ast":null,"code":"import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { deleteData } from \"../types/globalTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\nexport const getProfileUsers = ({\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: PROFILE_TYPES.GET_ID,\n      payload: id\n    });\n\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = getDataAPI(`/user/${id}`, auth.token);\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n      const users = await res;\n      const userPosts = await res1;\n      console.log({\n        users,\n        userPosts\n      });\n      dispatch({\n        type: PROFILE_TYPES.GET_USER,\n        payload: users.data\n      });\n      dispatch({\n        type: PROFILE_TYPES.GET_POSTS,\n        payload: { ...userPosts.data,\n          _id: id,\n          page: 2\n        }\n      });\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Please add your full name\"\n    }\n  });\n  if (userData.fullname.length > 25) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your full name is too long\"\n    }\n  });\n  if (userData.story.length > 200) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your story is too long\"\n    }\n  });\n\n  try {\n    let media;\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        loading: true\n      }\n    });\n    if (avatar) media = await imageUpload([avatar]);\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const changePasswordUser = ({\n  userData,\n  auth\n}) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const followAction = ({\n  users,\n  user,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user.id)) {\n      newUser = { ...user,\n        followers: [...user.followers, auth.user]\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: [...item.followers, auth.user]\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.FOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: [...auth.user.following, newUser]\n        }\n      }\n    });\n\n    try {\n      const res = await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\n      socket.emit(\"follow\", res.data.newUser); //Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: \"has started to follow you.\",\n        recipients: [newUser._id],\n        url: `/profile/${auth.user._id}`\n      };\n      dispatch(createNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unFollowAction = ({\n  users,\n  user,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user.id)) {\n      newUser = { ...user,\n        followers: deleteData(user.followers, auth.user._id)\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: deleteData(item.followers, auth.user._id)\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.UNFOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: deleteData(auth.user.following, newUser._id)\n        }\n      }\n    });\n\n    try {\n      const res = await patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\n      socket.emit(\"unFollow\", res.data.newUser); //Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: \"has started to follow you.\",\n        recipients: [newUser._id],\n        url: `/profile/${auth.user._id}`\n      };\n      dispatch(removeNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMoreUserPosts = ({\n  id,\n  page,\n  auth\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`user_posts/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        page: page + 1,\n        _id: id\n      };\n      dispatch({\n        type: PROFILE_TYPES.UPDATE_POST,\n        payload: newData\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPostAuth = ({\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = getDataAPI(`/user_posts/${id}`, auth.token);\n      console.log(res);\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/profileActions.js"],"names":["getDataAPI","patchDataAPI","imageUpload","AUTH_TYPES","deleteData","NOTIFY_TYPES","PROFILE_TYPES","createNewsNotify","removeNewsNotify","getProfileUsers","id","auth","dispatch","type","GET_ID","payload","LOADING","res","token","res1","users","userPosts","console","log","GET_USER","data","GET_POSTS","_id","page","err","NOTIFY","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","changePasswordUser","followAction","socket","newUser","every","item","followers","forEach","FOLLOW","following","emit","text","recipients","unFollowAction","UNFOLLOW","getMoreUserPosts","newData","UPDATE_POST","getPostAuth"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,uBAAzC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,eAAnD;AAEA,OAAO,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAkB;AAC/C,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,aAAa,CAACQ,MADb;AAEPC,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;;AAKA,QAAI;AACFE,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACU,OADb;AAEPD,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIA,YAAME,GAAG,GAAGjB,UAAU,CAAE,SAAQU,EAAG,EAAb,EAAgBC,IAAI,CAACO,KAArB,CAAtB;AAEA,YAAMC,IAAI,GAAGnB,UAAU,CAAE,eAAcU,EAAG,EAAnB,EAAsBC,IAAI,CAACO,KAA3B,CAAvB;AAEA,YAAME,KAAK,GAAG,MAAMH,GAApB;AACA,YAAMI,SAAS,GAAG,MAAMF,IAAxB;AAEAG,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAZ;AAEAT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACkB,QADb;AAEPT,QAAAA,OAAO,EAAEK,KAAK,CAACK;AAFR,OAAD,CAAR;AAKAb,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACoB,SADb;AAEPX,QAAAA,OAAO,EAAE,EAAE,GAAGM,SAAS,CAACI,IAAf;AAAqBE,UAAAA,GAAG,EAAEjB,EAA1B;AAA8BkB,UAAAA,IAAI,EAAE;AAApC;AAFF,OAAD,CAAR;AAKAhB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACU,OADb;AAEPD,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KA5BD,CA4BE,OAAOc,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAxCD;AAyCD,CA1CM;AA4CP,OAAO,MAAMC,iBAAiB,GAC5B,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBzB,EAAAA;AAApB,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,MAAI,CAACuB,QAAQ,CAACE,QAAd,EACE,OAAOzB,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAER,YAAY,CAACyB,MADL;AAEdf,IAAAA,OAAO,EAAE;AAAEgB,MAAAA,KAAK,EAAE;AAAT;AAFK,GAAD,CAAf;AAIF,MAAII,QAAQ,CAACE,QAAT,CAAkBC,MAAlB,GAA2B,EAA/B,EACE,OAAO1B,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAER,YAAY,CAACyB,MADL;AAEdf,IAAAA,OAAO,EAAE;AAAEgB,MAAAA,KAAK,EAAE;AAAT;AAFK,GAAD,CAAf;AAIF,MAAII,QAAQ,CAACI,KAAT,CAAeD,MAAf,GAAwB,GAA5B,EACE,OAAO1B,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAER,YAAY,CAACyB,MADL;AAEdf,IAAAA,OAAO,EAAE;AAAEgB,MAAAA,KAAK,EAAE;AAAT;AAFK,GAAD,CAAf;;AAIF,MAAI;AACF,QAAIS,KAAJ;AACA5B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,MAAAA,OAAO,EAAE;AAAE0B,QAAAA,OAAO,EAAE;AAAX;AAFF,KAAD,CAAR;AAIA,QAAIL,MAAJ,EAAYI,KAAK,GAAG,MAAMtC,WAAW,CAAC,CAACkC,MAAD,CAAD,CAAzB;AAEZ,UAAMnB,GAAG,GAAG,MAAMhB,YAAY,CAC5B,MAD4B,EAE5B,EACE,GAAGkC,QADL;AAEEC,MAAAA,MAAM,EAAEA,MAAM,GAAGI,KAAK,CAAC,CAAD,CAAL,CAASE,GAAZ,GAAkB/B,IAAI,CAACgC,IAAL,CAAUP;AAF5C,KAF4B,EAM5BzB,IAAI,CAACO,KANuB,CAA9B;AASAN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,UAAU,CAACyC,IADV;AAEP7B,MAAAA,OAAO,EAAE,EACP,GAAGJ,IADI;AAEPgC,QAAAA,IAAI,EAAE,EACJ,GAAGhC,IAAI,CAACgC,IADJ;AAEJ,aAAGR,QAFC;AAGJC,UAAAA,MAAM,EAAEA,MAAM,GAAGI,KAAK,CAAC,CAAD,CAAL,CAASE,GAAZ,GAAkB/B,IAAI,CAACgC,IAAL,CAAUP;AAHtC;AAFC;AAFF,KAAD,CAAR;AAYAxB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,MAAAA,OAAO,EAAE;AAAE8B,QAAAA,OAAO,EAAE5B,GAAG,CAACQ,IAAJ,CAASQ;AAApB;AAFF,KAAD,CAAR;AAID,GAjCD,CAiCE,OAAOJ,GAAP,EAAY;AACZjB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,MAAAA,OAAO,EAAE;AAAEgB,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAzDI;AA2DP,OAAO,MAAMa,kBAAkB,GAAG,CAAC;AAAEX,EAAAA,QAAF;AAAYxB,EAAAA;AAAZ,CAAD,KAAwB;AACxD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACU,OADb;AAEPD,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIA,YAAME,GAAG,GAAG,MAAMhB,YAAY,CAAC,gBAAD,EAAmBkC,QAAnB,EAA6BxB,IAAI,CAACO,KAAlC,CAA9B;AACAN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAE8B,UAAAA,OAAO,EAAE5B,GAAG,CAACQ,IAAJ,CAASQ;AAApB;AAFF,OAAD,CAAR;AAID,KAVD,CAUE,OAAOJ,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMc,YAAY,GAAG,CAAC;AAAE3B,EAAAA,KAAF;AAASuB,EAAAA,IAAT;AAAehC,EAAAA,IAAf;AAAqBqC,EAAAA;AAArB,CAAD,KAAmC;AAC7D,SAAO,MAAOpC,QAAP,IAAoB;AACzB,QAAIqC,OAAJ;;AAEA,QAAI7B,KAAK,CAAC8B,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACxB,GAAL,KAAagB,IAAI,CAACjC,EAAxC,CAAJ,EAAiD;AAC/CuC,MAAAA,OAAO,GAAG,EAAE,GAAGN,IAAL;AAAWS,QAAAA,SAAS,EAAE,CAAC,GAAGT,IAAI,CAACS,SAAT,EAAoBzC,IAAI,CAACgC,IAAzB;AAAtB,OAAV;AACD,KAFD,MAEO;AACLvB,MAAAA,KAAK,CAACiC,OAAN,CAAeF,IAAD,IAAU;AACtB,YAAIA,IAAI,CAACxB,GAAL,KAAagB,IAAI,CAAChB,GAAtB,EAA2B;AACzBsB,UAAAA,OAAO,GAAG,EAAE,GAAGE,IAAL;AAAWC,YAAAA,SAAS,EAAE,CAAC,GAAGD,IAAI,CAACC,SAAT,EAAoBzC,IAAI,CAACgC,IAAzB;AAAtB,WAAV;AACD;AACF,OAJD;AAKD;;AAED/B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,aAAa,CAACgD,MADb;AAEPvC,MAAAA,OAAO,EAAEkC;AAFF,KAAD,CAAR;AAKArC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,UAAU,CAACyC,IADV;AAEP7B,MAAAA,OAAO,EAAE,EACP,GAAGJ,IADI;AAEPgC,QAAAA,IAAI,EAAE,EAAE,GAAGhC,IAAI,CAACgC,IAAV;AAAgBY,UAAAA,SAAS,EAAE,CAAC,GAAG5C,IAAI,CAACgC,IAAL,CAAUY,SAAd,EAAyBN,OAAzB;AAA3B;AAFC;AAFF,KAAD,CAAR;;AAQA,QAAI;AACF,YAAMhC,GAAG,GAAG,MAAMhB,YAAY,CAC3B,QAAO0C,IAAI,CAAChB,GAAI,SADW,EAE5B,IAF4B,EAG5BhB,IAAI,CAACO,KAHuB,CAA9B;AAKA8B,MAAAA,MAAM,CAACQ,IAAP,CAAY,QAAZ,EAAsBvC,GAAG,CAACQ,IAAJ,CAASwB,OAA/B,EANE,CAQF;;AACA,YAAMhB,GAAG,GAAG;AACVvB,QAAAA,EAAE,EAAEC,IAAI,CAACgC,IAAL,CAAUhB,GADJ;AAEV8B,QAAAA,IAAI,EAAE,4BAFI;AAGVC,QAAAA,UAAU,EAAE,CAACT,OAAO,CAACtB,GAAT,CAHF;AAIVe,QAAAA,GAAG,EAAG,YAAW/B,IAAI,CAACgC,IAAL,CAAUhB,GAAI;AAJrB,OAAZ;AAOAf,MAAAA,QAAQ,CAACL,gBAAgB,CAAC;AAAE0B,QAAAA,GAAF;AAAOtB,QAAAA,IAAP;AAAaqC,QAAAA;AAAb,OAAD,CAAjB,CAAR;AACD,KAjBD,CAiBE,OAAOnB,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAjDD;AAkDD,CAnDM;AAqDP,OAAO,MAAM0B,cAAc,GAAG,CAAC;AAAEvC,EAAAA,KAAF;AAASuB,EAAAA,IAAT;AAAehC,EAAAA,IAAf;AAAqBqC,EAAAA;AAArB,CAAD,KAAmC;AAC/D,SAAO,MAAOpC,QAAP,IAAoB;AACzB,QAAIqC,OAAJ;;AAEA,QAAI7B,KAAK,CAAC8B,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACxB,GAAL,KAAagB,IAAI,CAACjC,EAAxC,CAAJ,EAAiD;AAC/CuC,MAAAA,OAAO,GAAG,EACR,GAAGN,IADK;AAERS,QAAAA,SAAS,EAAEhD,UAAU,CAACuC,IAAI,CAACS,SAAN,EAAiBzC,IAAI,CAACgC,IAAL,CAAUhB,GAA3B;AAFb,OAAV;AAID,KALD,MAKO;AACLP,MAAAA,KAAK,CAACiC,OAAN,CAAeF,IAAD,IAAU;AACtB,YAAIA,IAAI,CAACxB,GAAL,KAAagB,IAAI,CAAChB,GAAtB,EAA2B;AACzBsB,UAAAA,OAAO,GAAG,EACR,GAAGE,IADK;AAERC,YAAAA,SAAS,EAAEhD,UAAU,CAAC+C,IAAI,CAACC,SAAN,EAAiBzC,IAAI,CAACgC,IAAL,CAAUhB,GAA3B;AAFb,WAAV;AAID;AACF,OAPD;AAQD;;AAEDf,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,aAAa,CAACsD,QADb;AAEP7C,MAAAA,OAAO,EAAEkC;AAFF,KAAD,CAAR;AAKArC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,UAAU,CAACyC,IADV;AAEP7B,MAAAA,OAAO,EAAE,EACP,GAAGJ,IADI;AAEPgC,QAAAA,IAAI,EAAE,EACJ,GAAGhC,IAAI,CAACgC,IADJ;AAEJY,UAAAA,SAAS,EAAEnD,UAAU,CAACO,IAAI,CAACgC,IAAL,CAAUY,SAAX,EAAsBN,OAAO,CAACtB,GAA9B;AAFjB;AAFC;AAFF,KAAD,CAAR;;AAWA,QAAI;AACF,YAAMV,GAAG,GAAG,MAAMhB,YAAY,CAC3B,QAAO0C,IAAI,CAAChB,GAAI,WADW,EAE5B,IAF4B,EAG5BhB,IAAI,CAACO,KAHuB,CAA9B;AAMA8B,MAAAA,MAAM,CAACQ,IAAP,CAAY,UAAZ,EAAwBvC,GAAG,CAACQ,IAAJ,CAASwB,OAAjC,EAPE,CASF;;AACA,YAAMhB,GAAG,GAAG;AACVvB,QAAAA,EAAE,EAAEC,IAAI,CAACgC,IAAL,CAAUhB,GADJ;AAEV8B,QAAAA,IAAI,EAAE,4BAFI;AAGVC,QAAAA,UAAU,EAAE,CAACT,OAAO,CAACtB,GAAT,CAHF;AAIVe,QAAAA,GAAG,EAAG,YAAW/B,IAAI,CAACgC,IAAL,CAAUhB,GAAI;AAJrB,OAAZ;AAOAf,MAAAA,QAAQ,CAACJ,gBAAgB,CAAC;AAAEyB,QAAAA,GAAF;AAAOtB,QAAAA,IAAP;AAAaqC,QAAAA;AAAb,OAAD,CAAjB,CAAR;AACD,KAlBD,CAkBE,OAAOnB,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GA3DD;AA4DD,CA7DM;AA+DP,OAAO,MAAM4B,gBAAgB,GAAG,CAAC;AAAEnD,EAAAA,EAAF;AAAMkB,EAAAA,IAAN;AAAYjB,EAAAA;AAAZ,CAAD,KAAwB;AACtD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMK,GAAG,GAAG,MAAMjB,UAAU,CACzB,cAAaU,EAAG,UAASkB,IAAI,GAAG,CAAE,EADT,EAE1BjB,IAAI,CAACO,KAFqB,CAA5B;AAIA,YAAM4C,OAAO,GAAG,EAAE,GAAG7C,GAAG,CAACQ,IAAT;AAAeG,QAAAA,IAAI,EAAEA,IAAI,GAAG,CAA5B;AAA+BD,QAAAA,GAAG,EAAEjB;AAApC,OAAhB;AACAE,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACyD,WADb;AAEPhD,QAAAA,OAAO,EAAE+C;AAFF,OAAD,CAAR;AAID,KAVD,CAUE,OAAOjC,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAM+B,WAAW,GAAG,CAAC;AAAEtD,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAkB;AAC3C,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACU,OADb;AAEPD,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIA,YAAME,GAAG,GAAGjB,UAAU,CAAE,eAAcU,EAAG,EAAnB,EAAsBC,IAAI,CAACO,KAA3B,CAAtB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACU,OADb;AAEPD,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KAXD,CAWE,OAAOc,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,YAAY,CAACyB,MADZ;AAEPf,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaP,IAAb,CAAkBQ;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAlBD;AAmBD,CApBM","sourcesContent":["import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { deleteData } from \"../types/globalTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\r\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\r\n\r\nexport const getProfileUsers = ({ id, auth }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: PROFILE_TYPES.GET_ID,\r\n      payload: id,\r\n    });\r\n\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = getDataAPI(`/user/${id}`, auth.token);\r\n\r\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\r\n\r\n      const users = await res;\r\n      const userPosts = await res1;\r\n\r\n      console.log({ users, userPosts });\r\n\r\n      dispatch({\r\n        type: PROFILE_TYPES.GET_USER,\r\n        payload: users.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: PROFILE_TYPES.GET_POSTS,\r\n        payload: { ...userPosts.data, _id: id, page: 2 },\r\n      });\r\n\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: false,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateProfileUser =\r\n  ({ userData, avatar, auth }) =>\r\n  async (dispatch) => {\r\n    if (!userData.fullname)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Please add your full name\" },\r\n      });\r\n    if (userData.fullname.length > 25)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your full name is too long\" },\r\n      });\r\n    if (userData.story.length > 200)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your story is too long\" },\r\n      });\r\n    try {\r\n      let media;\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { loading: true },\r\n      });\r\n      if (avatar) media = await imageUpload([avatar]);\r\n\r\n      const res = await patchDataAPI(\r\n        \"user\",\r\n        {\r\n          ...userData,\r\n          avatar: avatar ? media[0].url : auth.user.avatar,\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: {\r\n          ...auth,\r\n          user: {\r\n            ...auth.user,\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar,\r\n          },\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const changePasswordUser = ({ userData, auth }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const followAction = ({ users, user, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user.id)) {\r\n      newUser = { ...user, followers: [...user.followers, auth.user] };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = { ...item, followers: [...item.followers, auth.user] };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_TYPES.FOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, following: [...auth.user.following, newUser] },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `user/${user._id}/follow`,\r\n        null,\r\n        auth.token\r\n      );\r\n      socket.emit(\"follow\", res.data.newUser);\r\n\r\n      //Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"has started to follow you.\",\r\n        recipients: [newUser._id],\r\n        url: `/profile/${auth.user._id}`,\r\n      };\r\n\r\n      dispatch(createNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unFollowAction = ({ users, user, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user.id)) {\r\n      newUser = {\r\n        ...user,\r\n        followers: deleteData(user.followers, auth.user._id),\r\n      };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = {\r\n            ...item,\r\n            followers: deleteData(item.followers, auth.user._id),\r\n          };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_TYPES.UNFOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: {\r\n          ...auth.user,\r\n          following: deleteData(auth.user.following, newUser._id),\r\n        },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `user/${user._id}/unfollow`,\r\n        null,\r\n        auth.token\r\n      );\r\n\r\n      socket.emit(\"unFollow\", res.data.newUser);\r\n\r\n      //Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"has started to follow you.\",\r\n        recipients: [newUser._id],\r\n        url: `/profile/${auth.user._id}`,\r\n      };\r\n\r\n      dispatch(removeNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMoreUserPosts = ({ id, page, auth }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `user_posts/${id}?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n      const newData = { ...res.data, page: page + 1, _id: id };\r\n      dispatch({\r\n        type: PROFILE_TYPES.UPDATE_POST,\r\n        payload: newData,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPostAuth = ({ id, auth }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = getDataAPI(`/user_posts/${id}`, auth.token);\r\n      console.log(res);\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: false,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}