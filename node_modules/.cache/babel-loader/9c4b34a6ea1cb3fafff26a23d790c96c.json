{"ast":null,"code":"import { deleteDataAPI, getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nexport const createPostAction = ({\n  content,\n  images,\n  auth\n}) => {\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (images.length > 0) media = await imageUpload(images);\n      const res = await postDataAPI(\"posts\", {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: { ...res.data.newPost,\n          user: auth.user\n        }\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      }); //Notify\n\n      const msg = {\n        id: res.data.newPost._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${res.data.newPost._id}`,\n        content,\n        image: media[0].url\n      };\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updatePostAction = ({\n  content,\n  images,\n  auth,\n  status\n}) => {\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) return;\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n      const res = await patchDataAPI(`post/${status._id}`, {\n        content,\n        images: [...imgOldUrl, ...media]\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: true\n      });\n      const res = await getDataAPI(\"posts\", token);\n      dispatch({\n        type: POST_TYPES.GET_POSTS,\n        payload: { ...res.data,\n          page: 2\n        }\n      });\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likePostAction = ({\n  post,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: [...post.likes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"likePost\", newPost);\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: res.data.msg\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikePostAction = ({\n  post,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"unLikePost\", newPost);\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: res.data.msg\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPostDetail = ({\n  detailPost,\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    if (detailPost.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.post\n        });\n      } catch (err) {\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const deletePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: POST_TYPES.DELETE_POST,\n      payload: post\n    });\n\n    try {\n      await deleteDataAPI(`post/${post._id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const savePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: [...auth.user.saved, post._id]\n    };\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unSavePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    console.log(123);\n    const newUser = { ...auth.user,\n      saved: auth.user.saved.filter(id => id !== post._id)\n    };\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/postActions.js"],"names":["deleteDataAPI","getDataAPI","patchDataAPI","postDataAPI","imageUpload","AUTH_TYPES","NOTIFY_TYPES","POST_TYPES","createPostAction","content","images","auth","dispatch","media","type","NOTIFY","payload","loading","length","res","token","CREATE_POST","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","updatePostAction","status","imgNewUrl","filter","img","imgOldUrl","UPDATE_POST","getPosts","LOADING_POST","GET_POSTS","page","likePostAction","post","socket","likes","emit","unLikePostAction","like","getPostDetail","detailPost","every","GET_POST","deletePostAction","DELETE_POST","savePostAction","newUser","saved","AUTH","unSavePostAction","console","log"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\n\r\nexport const createPostAction = ({ content, images, auth }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        \"posts\",\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: { ...res.data.newPost, user: auth.user },\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n\r\n      //Notify\r\n\r\n      const msg = {\r\n        id: res.data.newPost._id,\r\n        text: \"Added a new post.\",\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${res.data.newPost._id}`,\r\n        content,\r\n        image: media[0].url,\r\n      };\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePostAction = ({ content, images, auth, status }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    const imgNewUrl = images.filter((img) => !img.url);\r\n    const imgOldUrl = images.filter((img) => img.url);\r\n\r\n    if (\r\n      status.content === content &&\r\n      imgNewUrl.length === 0 &&\r\n      imgOldUrl.length === status.images.length\r\n    )\r\n      return;\r\n\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\r\n\r\n      const res = await patchDataAPI(\r\n        `post/${status._id}`,\r\n        {\r\n          content,\r\n          images: [...imgOldUrl, ...media],\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: res.data.newPost,\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPosts = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n      const res = await getDataAPI(\"posts\", token);\r\n      dispatch({\r\n        type: POST_TYPES.GET_POSTS,\r\n        payload: { ...res.data, page: 2 },\r\n      });\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likePostAction = ({ post, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, likes: [...post.likes, auth.user] };\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    socket.emit(\"likePost\", newPost);\r\n    try {\r\n      const res = await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: res.data.msg,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikePostAction = ({ post, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n    socket.emit(\"unLikePost\", newPost);\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `post/${post._id}/unlike`,\r\n        null,\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: res.data.msg,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPostDetail = ({ detailPost, id, auth }) => {\r\n  return async (dispatch) => {\r\n    if (detailPost.every((post) => post._id !== id)) {\r\n      try {\r\n        const res = await getDataAPI(`post/${id}`, auth.token);\r\n        dispatch({\r\n          type: POST_TYPES.GET_POST,\r\n          payload: res.data.post,\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const deletePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: POST_TYPES.DELETE_POST,\r\n      payload: post,\r\n    });\r\n\r\n    try {\r\n      await deleteDataAPI(`post/${post._id}`, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const savePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: { ...auth, user: newUser },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unSavePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    console.log(123);\r\n    const newUser = {\r\n      ...auth.user,\r\n      saved: auth.user.saved.filter((id) => id !== post._id),\r\n    };\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: { ...auth, user: newUser },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}