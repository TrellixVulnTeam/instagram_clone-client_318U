{"ast":null,"code":"import { patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { deleteData, editData } from \"../types/globalTypes\";\nexport const createCommentAction = ({\n  post,\n  newComment,\n  auth\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateCommentAction = ({\n  comment,\n  post,\n  content,\n  auth\n}) => {\n  return async dispatch => {\n    const newComments = editData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeCommentAction = ({\n  comment,\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: deleteData(comment.likes, auth.user._id)\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteCommentAction = ({\n  post,\n  auth,\n  comment\n}) => {\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {// await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/commentActions.js"],"names":["patchDataAPI","postDataAPI","NOTIFY_TYPES","POST_TYPES","deleteData","editData","createCommentAction","post","newComment","auth","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","err","NOTIFY","error","response","msg","updateCommentAction","comment","content","newComments","likeCommentAction","likes","unLikeCommentAction","deleteCommentAction","deleteArr","filter","cm","reply","find","da"],"mappings":"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","sourcesContent":["import { patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { deleteData, editData } from \"../types/globalTypes\";\r\nexport const createCommentAction = ({ post, newComment, auth }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n      const newData = {\r\n        ...res.data.newComment,\r\n        user: auth.user,\r\n      };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: newPost,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentAction = ({ comment, post, content, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComments = editData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikeCommentAction = ({ comment, post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: deleteData(comment.likes, auth.user._id),\r\n    };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteCommentAction = ({ post, auth, comment }) => {\r\n  return async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      // await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}