{"ast":null,"code":"var _jsxFileName = \"C:\\\\Benkia\\\\MERN\\\\instagram-clone\\\\client\\\\src\\\\components\\\\Comments\\\\InputComment\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createCommentAction } from \"../../../redux/actions/commentActions\";\nimport { STATUS_TYPES } from \"../../../redux/types/statusTypes\";\nimport Icons from \"../../Icons\";\nimport \"./index.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst InputComment = ({\n  children,\n  post,\n  onReply,\n  setOnReply\n}) => {\n  _s();\n\n  const {\n    auth,\n    socket,\n    input\n  } = useSelector(state => state);\n  const [content, setContent] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!content.trim()) {\n      if (setOnReply) return setOnReply(false);\n      return;\n    }\n\n    const newComments = {\n      content,\n      likes: [],\n      user: auth.user,\n      createdAt: new Date().toISOString(),\n      reply: onReply && onReply.commentId,\n      tag: onReply && onReply.user\n    };\n    let newComment = {\n      content,\n      likes: [],\n      user: auth.user,\n      createdAt: new Date().toISOString(),\n      reply: undefined,\n      tag: undefined\n    };\n    const replyComments = {\n      content,\n      likes: [],\n      user: auth.user,\n      createdAt: new Date().toISOString(),\n      reply: input.commentId,\n      tag: input.user\n    };\n\n    if (input.isReply) {\n      newComment = { ...newComment,\n        reply: input.commentId,\n        tag: input.user\n      };\n      dispatch(createCommentAction({\n        post,\n        newComment,\n        auth,\n        socket\n      }));\n    } else {\n      dispatch(createCommentAction({\n        post,\n        newComment,\n        auth,\n        socket\n      }));\n    }\n\n    dispatch({\n      type: STATUS_TYPES.ON_REPLY,\n      payload: false\n    });\n    if (setOnReply) return setOnReply(false);\n    setContent(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-comments\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"input-form\",\n        onSubmit: handleSubmit,\n        children: [children, input.isReply && /*#__PURE__*/_jsxDEV(Link, {\n          to: `/profile/${input.user._id}`,\n          className: \"input-tag\",\n          children: [\"@\", input.user.username, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-comment\",\n          value: content,\n          onChange: e => setContent(e.target.value),\n          placeholder: \"Add a comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-icons\",\n          children: /*#__PURE__*/_jsxDEV(Icons, {\n            setContent: setContent,\n            content: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"input-btn\",\n          disabled: content ? false : true,\n          style: {\n            opacity: content ? 1 : 0.5\n          },\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(InputComment, \"UVCfaGj0M0WqXR7EtPmoGWmoFs4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = InputComment;\nexport default InputComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputComment\");","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/components/Comments/InputComment/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Link","createCommentAction","STATUS_TYPES","Icons","InputComment","children","post","onReply","setOnReply","auth","socket","input","state","content","setContent","dispatch","handleSubmit","e","preventDefault","trim","newComments","likes","user","createdAt","Date","toISOString","reply","commentId","tag","newComment","undefined","replyComments","isReply","type","ON_REPLY","payload","_id","username","target","value","opacity"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createCommentAction } from \"../../../redux/actions/commentActions\";\r\nimport { STATUS_TYPES } from \"../../../redux/types/statusTypes\";\r\nimport Icons from \"../../Icons\";\r\nimport \"./index.scss\";\r\nconst InputComment = ({ children, post, onReply, setOnReply }) => {\r\n  const { auth, socket, input } = useSelector((state) => state);\r\n  const [content, setContent] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!content.trim()) {\r\n      if (setOnReply) return setOnReply(false);\r\n      return;\r\n    }\r\n\r\n    const newComments = {\r\n      content,\r\n      likes: [],\r\n      user: auth.user,\r\n      createdAt: new Date().toISOString(),\r\n      reply: onReply && onReply.commentId,\r\n      tag: onReply && onReply.user,\r\n    };\r\n\r\n    let newComment = {\r\n      content,\r\n      likes: [],\r\n      user: auth.user,\r\n      createdAt: new Date().toISOString(),\r\n      reply: undefined,\r\n      tag: undefined,\r\n    };\r\n    const replyComments = {\r\n      content,\r\n      likes: [],\r\n      user: auth.user,\r\n      createdAt: new Date().toISOString(),\r\n      reply: input.commentId,\r\n      tag: input.user,\r\n    };\r\n\r\n    if (input.isReply) {\r\n      newComment = {\r\n        ...newComment,\r\n        reply: input.commentId,\r\n        tag: input.user,\r\n      };\r\n      dispatch(createCommentAction({ post, newComment, auth, socket }));\r\n    } else {\r\n      dispatch(createCommentAction({ post, newComment, auth, socket }));\r\n    }\r\n    dispatch({\r\n      type: STATUS_TYPES.ON_REPLY,\r\n      payload: false,\r\n    });\r\n    if (setOnReply) return setOnReply(false);\r\n\r\n    setContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"input-comments\">\r\n        <form className=\"input-form\" onSubmit={handleSubmit}>\r\n          {children}\r\n          {input.isReply && (\r\n            <Link to={`/profile/${input.user._id}`} className=\"input-tag\">\r\n              @{input.user.username}{\" \"}\r\n            </Link>\r\n          )}\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-comment\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n            placeholder=\"Add a comment...\"\r\n          />\r\n\r\n          <div className=\"input-icons\">\r\n            <Icons setContent={setContent} content={content} />\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"input-btn\"\r\n            disabled={content ? false : true}\r\n            style={{ opacity: content ? 1 : 0.5 }}\r\n          >\r\n            Post\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputComment;\r\n"]},"metadata":{},"sourceType":"module"}