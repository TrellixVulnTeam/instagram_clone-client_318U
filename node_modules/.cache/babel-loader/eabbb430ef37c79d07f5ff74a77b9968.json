{"ast":null,"code":"import { postDataAPI } from \"../../utils/fetchData\";\nimport { validForm } from \"../../utils/validForm\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nexport const loginAction = data => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      const res = await postDataAPI(\"login\", data);\n      dispatch({\n        type: AUTH_TYPES.AUTH,\n        payload: {\n          token: res.data.accessToken,\n          user: res.data.user\n        }\n      });\n      localStorage.setItem(\"firstLogin\", true);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const refreshToken = () => {\n  return async dispatch => {\n    const firstLogin = localStorage.getItem(\"firstLogin\");\n\n    if (firstLogin) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n\n      try {\n        const res = await postDataAPI(\"refresh_token\");\n        dispatch({\n          type: AUTH_TYPES.AUTH,\n          payload: {\n            token: res.data.accessToken,\n            user: res.data.user\n          }\n        });\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {}\n        });\n      } catch (err) {\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const registerAction = ({\n  userData,\n  history\n}) => {\n  return async dispatch => {\n    const check = validForm(userData);\n    if (check.errLength > 0) return dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        error: check.errMsg.email || check.errMsg.fullname || check.errMsg.password || check.errMsg.username\n      }\n    });\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      const res = await postDataAPI(\"register\", userData);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n      history.push(\"/\");\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const logoutAction = () => {\n  return async dispatch => {\n    try {\n      localStorage.removeItem(\"firstLogin\");\n      await postDataAPI(\"logout\");\n      window.location.href = \"/\";\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const forgotPasswordAction = email => {\n  return async dispatch => {\n    try {\n      const res = await postDataAPI(\"forgot\", {\n        email\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const resetPasswordAction = ({\n  password,\n  token\n}) => {\n  return async dispatch => {\n    console.log(password, token); // try {\n    //   const res = await postDataAPI(\"resetPassword\", password, { token });\n    //   dispatch({\n    //     type: NOTIFY_TYPES.NOTIFY,\n    //     payload: { success: res.data.msg },\n    //   });\n    // } catch (err) {\n    //   dispatch({\n    //     type: NOTIFY_TYPES.NOTIFY,\n    //     payload: { error: err.response.data.msg },\n    //   });\n    // }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/authActions.js"],"names":["postDataAPI","validForm","AUTH_TYPES","NOTIFY_TYPES","loginAction","data","dispatch","type","NOTIFY","payload","loading","res","AUTH","token","accessToken","user","localStorage","setItem","success","msg","err","error","response","refreshToken","firstLogin","getItem","registerAction","userData","history","check","errLength","errMsg","email","fullname","password","username","push","logoutAction","removeItem","window","location","href","forgotPasswordAction","resetPasswordAction","console","log"],"mappings":"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","sourcesContent":["import { postDataAPI } from \"../../utils/fetchData\";\r\nimport { validForm } from \"../../utils/validForm\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const loginAction = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      const res = await postDataAPI(\"login\", data);\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: { token: res.data.accessToken, user: res.data.user },\r\n      });\r\n      localStorage.setItem(\"firstLogin\", true);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const refreshToken = () => {\r\n  return async (dispatch) => {\r\n    const firstLogin = localStorage.getItem(\"firstLogin\");\r\n    if (firstLogin) {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      try {\r\n        const res = await postDataAPI(\"refresh_token\");\r\n        dispatch({\r\n          type: AUTH_TYPES.AUTH,\r\n          payload: { token: res.data.accessToken, user: res.data.user },\r\n        });\r\n        dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: {} });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const registerAction = ({ userData, history }) => {\r\n  return async (dispatch) => {\r\n    const check = validForm(userData);\r\n    if (check.errLength > 0)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: {\r\n          error:\r\n            check.errMsg.email ||\r\n            check.errMsg.fullname ||\r\n            check.errMsg.password ||\r\n            check.errMsg.username,\r\n        },\r\n      });\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      const res = await postDataAPI(\"register\", userData);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n      history.push(\"/\");\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const logoutAction = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      localStorage.removeItem(\"firstLogin\");\r\n\r\n      await postDataAPI(\"logout\");\r\n      window.location.href = \"/\";\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const forgotPasswordAction = (email) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await postDataAPI(\"forgot\", { email });\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const resetPasswordAction = ({ password, token }) => {\r\n  return async (dispatch) => {\r\n    console.log(password, token);\r\n    // try {\r\n    //   const res = await postDataAPI(\"resetPassword\", password, { token });\r\n    //   dispatch({\r\n    //     type: NOTIFY_TYPES.NOTIFY,\r\n    //     payload: { success: res.data.msg },\r\n    //   });\r\n    // } catch (err) {\r\n    //   dispatch({\r\n    //     type: NOTIFY_TYPES.NOTIFY,\r\n    //     payload: { error: err.response.data.msg },\r\n    //   });\r\n    // }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}