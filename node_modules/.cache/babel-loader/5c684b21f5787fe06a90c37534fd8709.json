{"ast":null,"code":"import { deleteDataAPI, getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\nexport const createPostAction = ({\n  content,\n  images,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (images.length > 0) media = await imageUpload(images);\n      const res = await postDataAPI(\"posts\", {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: { ...res.data.newPost,\n          user: auth.user\n        }\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      }); //Notify\n\n      const msg = {\n        id: res.data.newPost._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${res.data.newPost._id}`,\n        content,\n        image: media[0].url\n      };\n      dispatch(createNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updatePostAction = ({\n  content,\n  images,\n  auth,\n  status\n}) => {\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) return;\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n      const res = await patchDataAPI(`post/${status._id}`, {\n        content,\n        images: [...imgOldUrl, ...media]\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: true\n      });\n      const res = await getDataAPI(\"posts\", token);\n      dispatch({\n        type: POST_TYPES.GET_POSTS,\n        payload: { ...res.data,\n          page: 2\n        }\n      });\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMorePosts = ({\n  auth,\n  page\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`posts?limit=${page * 9}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POSTS,\n        payload: { ...res.data\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likePostAction = ({\n  post,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: [...post.likes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"likePost\", newPost);\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: res.data.msg\n      }); //Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: \"liked your post.\",\n        recipients: [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikePostAction = ({\n  post,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"unLikePost\", newPost);\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: res.data.msg\n      }); //Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: \"liked your post.\",\n        recipients: [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPostDetail = ({\n  detailPost,\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    if (detailPost.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.post\n        });\n      } catch (err) {\n        dispatch({\n          type: NOTIFY_TYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const deletePostAction = ({\n  post,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: POST_TYPES.DELETE_POST,\n      payload: post\n    });\n\n    try {\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token); //Notify\n\n      const msg = {\n        id: post._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const savePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: [...auth.user.saved, post._id]\n    };\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unSavePostAction = ({\n  post,\n  auth\n}) => {\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: auth.user.saved.filter(id => id !== post._id)\n    };\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getRelatedPostAction = ({\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    console.log({\n      id,\n      auth\n    });\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/postActions.js"],"names":["deleteDataAPI","getDataAPI","patchDataAPI","postDataAPI","imageUpload","AUTH_TYPES","NOTIFY_TYPES","POST_TYPES","createNewsNotify","removeNewsNotify","createPostAction","content","images","auth","socket","dispatch","media","type","NOTIFY","payload","loading","length","res","token","CREATE_POST","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","updatePostAction","status","imgNewUrl","filter","img","imgOldUrl","UPDATE_POST","getPosts","LOADING_POST","GET_POSTS","page","getMorePosts","likePostAction","post","likes","emit","unLikePostAction","like","getPostDetail","detailPost","every","GET_POST","deletePostAction","DELETE_POST","savePostAction","newUser","saved","AUTH","unSavePostAction","getRelatedPostAction","console","log"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\r\n\r\nexport const createPostAction = ({ content, images, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        \"posts\",\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: { ...res.data.newPost, user: auth.user },\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n\r\n      //Notify\r\n\r\n      const msg = {\r\n        id: res.data.newPost._id,\r\n        text: \"Added a new post.\",\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${res.data.newPost._id}`,\r\n        content,\r\n        image: media[0].url,\r\n      };\r\n\r\n      dispatch(createNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePostAction = ({ content, images, auth, status }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    const imgNewUrl = images.filter((img) => !img.url);\r\n    const imgOldUrl = images.filter((img) => img.url);\r\n\r\n    if (\r\n      status.content === content &&\r\n      imgNewUrl.length === 0 &&\r\n      imgOldUrl.length === status.images.length\r\n    )\r\n      return;\r\n\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\r\n\r\n      const res = await patchDataAPI(\r\n        `post/${status._id}`,\r\n        {\r\n          content,\r\n          images: [...imgOldUrl, ...media],\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: POST_TYPES.UPDATE_POST,\r\n        payload: res.data.newPost,\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPosts = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n      const res = await getDataAPI(\"posts\", token);\r\n      dispatch({\r\n        type: POST_TYPES.GET_POSTS,\r\n        payload: { ...res.data, page: 2 },\r\n      });\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMorePosts = ({ auth, page }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(`posts?limit=${page * 9}`, auth.token);\r\n      dispatch({\r\n        type: POST_TYPES.GET_POSTS,\r\n        payload: { ...res.data },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likePostAction = ({ post, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, likes: [...post.likes, auth.user] };\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    socket.emit(\"likePost\", newPost);\r\n    try {\r\n      const res = await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: res.data.msg,\r\n      });\r\n\r\n      //Notify\r\n\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"liked your post.\",\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikePostAction = ({ post, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n    socket.emit(\"unLikePost\", newPost);\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `post/${post._id}/unlike`,\r\n        null,\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: res.data.msg,\r\n      });\r\n\r\n      //Notify\r\n\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"liked your post.\",\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n      };\r\n\r\n      dispatch(removeNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPostDetail = ({ detailPost, id, auth }) => {\r\n  return async (dispatch) => {\r\n    if (detailPost.every((post) => post._id !== id)) {\r\n      try {\r\n        const res = await getDataAPI(`post/${id}`, auth.token);\r\n        dispatch({\r\n          type: POST_TYPES.GET_POST,\r\n          payload: res.data.post,\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: NOTIFY_TYPES.NOTIFY,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const deletePostAction = ({ post, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: POST_TYPES.DELETE_POST,\r\n      payload: post,\r\n    });\r\n\r\n    try {\r\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token);\r\n\r\n      //Notify\r\n\r\n      const msg = {\r\n        id: post._id,\r\n        text: \"Added a new post.\",\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${post._id}`,\r\n      };\r\n\r\n      dispatch(removeNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const savePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: { ...auth, user: newUser },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unSavePostAction = ({ post, auth }) => {\r\n  return async (dispatch) => {\r\n    const newUser = {\r\n      ...auth.user,\r\n      saved: auth.user.saved.filter((id) => id !== post._id),\r\n    };\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: { ...auth, user: newUser },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getRelatedPostAction = ({ id, auth }) => {\r\n  return async (dispatch) => {\r\n    console.log({ id, auth });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}