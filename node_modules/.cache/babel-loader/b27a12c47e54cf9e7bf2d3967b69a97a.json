{"ast":null,"code":"import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { deleteData } from \"../types/globalTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\nexport const getProfileUsers = ({\n  users,\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: PROFILE_TYPES.GET_ID,\n      payload: id\n    }); // if (users.every((user) => user._id !== id)) {\n    //   try {\n    //     dispatch({\n    //       type: PROFILE_TYPES.LOADING,\n    //       payload: true,\n    //     });\n    //     const res = await getDataAPI(`/user/${id}`, auth.token);\n    //     dispatch({\n    //       type: PROFILE_TYPES.GET_USER,\n    //       payload: res.data,\n    //     });\n    //     dispatch({\n    //       type: PROFILE_TYPES.LOADING,\n    //       payload: false,\n    //     });\n    //   } catch (err) {\n    //     dispatch({\n    //       type: NOTIFY_TYPES.NOTIFY,\n    //       payload: { error: err.response.data.msg },\n    //     });\n    //   }\n    // }\n  };\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Please add your full name\"\n    }\n  });\n  if (userData.fullname.length > 25) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your full name is too long\"\n    }\n  });\n  if (userData.story.length > 200) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your story is too long\"\n    }\n  });\n\n  try {\n    let media;\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        loading: true\n      }\n    });\n    if (avatar) media = await imageUpload([avatar]);\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const changePasswordUser = ({\n  userData,\n  auth\n}) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const followAction = ({\n  users,\n  user,\n  auth\n}) => {\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user.id)) {\n      newUser = { ...user,\n        followers: [...user.followers, auth.user]\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: [...item.followers, auth.user]\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.FOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: [...auth.user.following, newUser]\n        }\n      }\n    });\n\n    try {\n      await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unFollowAction = ({\n  users,\n  user,\n  auth\n}) => {\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user.id)) {\n      newUser = { ...user,\n        followers: deleteData(user.followers, auth.user._id)\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: deleteData(item.followers, auth.user._id)\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.UNFOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: deleteData(auth.user.following, newUser._id)\n        }\n      }\n    });\n\n    try {\n      const res = patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/profileActions.js"],"names":["getDataAPI","patchDataAPI","imageUpload","AUTH_TYPES","deleteData","NOTIFY_TYPES","PROFILE_TYPES","getProfileUsers","users","id","auth","dispatch","type","GET_ID","payload","updateProfileUser","userData","avatar","fullname","NOTIFY","error","length","story","media","loading","res","url","user","token","AUTH","success","data","msg","err","response","changePasswordUser","LOADING","followAction","newUser","every","item","_id","followers","forEach","FOLLOW","following","unFollowAction","UNFOLLOW"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,uBAAzC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAO,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,EAAT;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AACtD,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,aAAa,CAACO,MADb;AAEPC,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR,CADyB,CAMzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA5BD;AA6BD,CA9BM;AAgCP,OAAO,MAAMM,iBAAiB,GAC5B,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBP,EAAAA;AAApB,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,MAAI,CAACK,QAAQ,CAACE,QAAd,EACE,OAAOP,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAEP,YAAY,CAACc,MADL;AAEdL,IAAAA,OAAO,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAT;AAFK,GAAD,CAAf;AAIF,MAAIJ,QAAQ,CAACE,QAAT,CAAkBG,MAAlB,GAA2B,EAA/B,EACE,OAAOV,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAEP,YAAY,CAACc,MADL;AAEdL,IAAAA,OAAO,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAT;AAFK,GAAD,CAAf;AAIF,MAAIJ,QAAQ,CAACM,KAAT,CAAeD,MAAf,GAAwB,GAA5B,EACE,OAAOV,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAEP,YAAY,CAACc,MADL;AAEdL,IAAAA,OAAO,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAT;AAFK,GAAD,CAAf;;AAIF,MAAI;AACF,QAAIG,KAAJ;AACAZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,MAAAA,OAAO,EAAE;AAAEU,QAAAA,OAAO,EAAE;AAAX;AAFF,KAAD,CAAR;AAIA,QAAIP,MAAJ,EAAYM,KAAK,GAAG,MAAMrB,WAAW,CAAC,CAACe,MAAD,CAAD,CAAzB;AAEZ,UAAMQ,GAAG,GAAG,MAAMxB,YAAY,CAC5B,MAD4B,EAE5B,EACE,GAAGe,QADL;AAEEC,MAAAA,MAAM,EAAEA,MAAM,GAAGM,KAAK,CAAC,CAAD,CAAL,CAASG,GAAZ,GAAkBhB,IAAI,CAACiB,IAAL,CAAUV;AAF5C,KAF4B,EAM5BP,IAAI,CAACkB,KANuB,CAA9B;AASAjB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,UAAU,CAAC0B,IADV;AAEPf,MAAAA,OAAO,EAAE,EACP,GAAGJ,IADI;AAEPiB,QAAAA,IAAI,EAAE,EACJ,GAAGjB,IAAI,CAACiB,IADJ;AAEJ,aAAGX,QAFC;AAGJC,UAAAA,MAAM,EAAEA,MAAM,GAAGM,KAAK,CAAC,CAAD,CAAL,CAASG,GAAZ,GAAkBhB,IAAI,CAACiB,IAAL,CAAUV;AAHtC;AAFC;AAFF,KAAD,CAAR;AAYAN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,MAAAA,OAAO,EAAE;AAAEgB,QAAAA,OAAO,EAAEL,GAAG,CAACM,IAAJ,CAASC;AAApB;AAFF,KAAD,CAAR;AAID,GAjCD,CAiCE,OAAOC,GAAP,EAAY;AACZtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,MAAAA,OAAO,EAAE;AAAEM,QAAAA,KAAK,EAAEa,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBC;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAzDI;AA2DP,OAAO,MAAMG,kBAAkB,GAAG,CAAC;AAAEnB,EAAAA,QAAF;AAAYN,EAAAA;AAAZ,CAAD,KAAwB;AACxD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN,aAAa,CAAC8B,OADb;AAEPtB,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIA,YAAMW,GAAG,GAAG,MAAMxB,YAAY,CAAC,gBAAD,EAAmBe,QAAnB,EAA6BN,IAAI,CAACkB,KAAlC,CAA9B;AACAjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,QAAAA,OAAO,EAAE;AAAEgB,UAAAA,OAAO,EAAEL,GAAG,CAACM,IAAJ,CAASC;AAApB;AAFF,OAAD,CAAR;AAID,KAVD,CAUE,OAAOC,GAAP,EAAY;AACZtB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,QAAAA,OAAO,EAAE;AAAEM,UAAAA,KAAK,EAAEa,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBC;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAE7B,EAAAA,KAAF;AAASmB,EAAAA,IAAT;AAAejB,EAAAA;AAAf,CAAD,KAA2B;AACrD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI2B,OAAJ;;AAEA,QAAI9B,KAAK,CAAC+B,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAad,IAAI,CAAClB,EAAxC,CAAJ,EAAiD;AAC/C6B,MAAAA,OAAO,GAAG,EAAE,GAAGX,IAAL;AAAWe,QAAAA,SAAS,EAAE,CAAC,GAAGf,IAAI,CAACe,SAAT,EAAoBhC,IAAI,CAACiB,IAAzB;AAAtB,OAAV;AACD,KAFD,MAEO;AACLnB,MAAAA,KAAK,CAACmC,OAAN,CAAeH,IAAD,IAAU;AACtB,YAAIA,IAAI,CAACC,GAAL,KAAad,IAAI,CAACc,GAAtB,EAA2B;AACzBH,UAAAA,OAAO,GAAG,EAAE,GAAGE,IAAL;AAAWE,YAAAA,SAAS,EAAE,CAAC,GAAGF,IAAI,CAACE,SAAT,EAAoBhC,IAAI,CAACiB,IAAzB;AAAtB,WAAV;AACD;AACF,OAJD;AAKD;;AAEDhB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,aAAa,CAACsC,MADb;AAEP9B,MAAAA,OAAO,EAAEwB;AAFF,KAAD,CAAR;AAKA3B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,UAAU,CAAC0B,IADV;AAEPf,MAAAA,OAAO,EAAE,EACP,GAAGJ,IADI;AAEPiB,QAAAA,IAAI,EAAE,EAAE,GAAGjB,IAAI,CAACiB,IAAV;AAAgBkB,UAAAA,SAAS,EAAE,CAAC,GAAGnC,IAAI,CAACiB,IAAL,CAAUkB,SAAd,EAAyBP,OAAzB;AAA3B;AAFC;AAFF,KAAD,CAAR;;AAQA,QAAI;AACF,YAAMrC,YAAY,CAAE,QAAO0B,IAAI,CAACc,GAAI,SAAlB,EAA4B,IAA5B,EAAkC/B,IAAI,CAACkB,KAAvC,CAAlB;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZtB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,QAAAA,OAAO,EAAE;AAAEM,UAAAA,KAAK,EAAEa,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBC;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAlCD;AAmCD,CApCM;AAsCP,OAAO,MAAMc,cAAc,GAAG,CAAC;AAAEtC,EAAAA,KAAF;AAASmB,EAAAA,IAAT;AAAejB,EAAAA;AAAf,CAAD,KAA2B;AACvD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI2B,OAAJ;;AAEA,QAAI9B,KAAK,CAAC+B,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAad,IAAI,CAAClB,EAAxC,CAAJ,EAAiD;AAC/C6B,MAAAA,OAAO,GAAG,EACR,GAAGX,IADK;AAERe,QAAAA,SAAS,EAAEtC,UAAU,CAACuB,IAAI,CAACe,SAAN,EAAiBhC,IAAI,CAACiB,IAAL,CAAUc,GAA3B;AAFb,OAAV;AAID,KALD,MAKO;AACLjC,MAAAA,KAAK,CAACmC,OAAN,CAAeH,IAAD,IAAU;AACtB,YAAIA,IAAI,CAACC,GAAL,KAAad,IAAI,CAACc,GAAtB,EAA2B;AACzBH,UAAAA,OAAO,GAAG,EACR,GAAGE,IADK;AAERE,YAAAA,SAAS,EAAEtC,UAAU,CAACoC,IAAI,CAACE,SAAN,EAAiBhC,IAAI,CAACiB,IAAL,CAAUc,GAA3B;AAFb,WAAV;AAID;AACF,OAPD;AAQD;;AAED9B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,aAAa,CAACyC,QADb;AAEPjC,MAAAA,OAAO,EAAEwB;AAFF,KAAD,CAAR;AAKA3B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,UAAU,CAAC0B,IADV;AAEPf,MAAAA,OAAO,EAAE,EACP,GAAGJ,IADI;AAEPiB,QAAAA,IAAI,EAAE,EACJ,GAAGjB,IAAI,CAACiB,IADJ;AAEJkB,UAAAA,SAAS,EAAEzC,UAAU,CAACM,IAAI,CAACiB,IAAL,CAAUkB,SAAX,EAAsBP,OAAO,CAACG,GAA9B;AAFjB;AAFC;AAFF,KAAD,CAAR;;AAWA,QAAI;AACF,YAAMhB,GAAG,GAAGxB,YAAY,CAAE,QAAO0B,IAAI,CAACc,GAAI,WAAlB,EAA8B,IAA9B,EAAoC/B,IAAI,CAACkB,KAAzC,CAAxB;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZtB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,YAAY,CAACc,MADZ;AAEPL,QAAAA,OAAO,EAAE;AAAEM,UAAAA,KAAK,EAAEa,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBC;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GA3CD;AA4CD,CA7CM","sourcesContent":["import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { deleteData } from \"../types/globalTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\r\n\r\nexport const getProfileUsers = ({ users, id, auth }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: PROFILE_TYPES.GET_ID,\r\n      payload: id,\r\n    });\r\n\r\n    // if (users.every((user) => user._id !== id)) {\r\n    //   try {\r\n    //     dispatch({\r\n    //       type: PROFILE_TYPES.LOADING,\r\n    //       payload: true,\r\n    //     });\r\n    //     const res = await getDataAPI(`/user/${id}`, auth.token);\r\n    //     dispatch({\r\n    //       type: PROFILE_TYPES.GET_USER,\r\n    //       payload: res.data,\r\n    //     });\r\n    //     dispatch({\r\n    //       type: PROFILE_TYPES.LOADING,\r\n    //       payload: false,\r\n    //     });\r\n    //   } catch (err) {\r\n    //     dispatch({\r\n    //       type: NOTIFY_TYPES.NOTIFY,\r\n    //       payload: { error: err.response.data.msg },\r\n    //     });\r\n    //   }\r\n    // }\r\n  };\r\n};\r\n\r\nexport const updateProfileUser =\r\n  ({ userData, avatar, auth }) =>\r\n  async (dispatch) => {\r\n    if (!userData.fullname)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Please add your full name\" },\r\n      });\r\n    if (userData.fullname.length > 25)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your full name is too long\" },\r\n      });\r\n    if (userData.story.length > 200)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your story is too long\" },\r\n      });\r\n    try {\r\n      let media;\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { loading: true },\r\n      });\r\n      if (avatar) media = await imageUpload([avatar]);\r\n\r\n      const res = await patchDataAPI(\r\n        \"user\",\r\n        {\r\n          ...userData,\r\n          avatar: avatar ? media[0].url : auth.user.avatar,\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: {\r\n          ...auth,\r\n          user: {\r\n            ...auth.user,\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar,\r\n          },\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const changePasswordUser = ({ userData, auth }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const followAction = ({ users, user, auth }) => {\r\n  return async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user.id)) {\r\n      newUser = { ...user, followers: [...user.followers, auth.user] };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = { ...item, followers: [...item.followers, auth.user] };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_TYPES.FOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, following: [...auth.user.following, newUser] },\r\n      },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unFollowAction = ({ users, user, auth }) => {\r\n  return async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user.id)) {\r\n      newUser = {\r\n        ...user,\r\n        followers: deleteData(user.followers, auth.user._id),\r\n      };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = {\r\n            ...item,\r\n            followers: deleteData(item.followers, auth.user._id),\r\n          };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_TYPES.UNFOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: {\r\n          ...auth.user,\r\n          following: deleteData(auth.user.following, newUser._id),\r\n        },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}