{"ast":null,"code":"import { deleteDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { POST_TYPES } from \"../types/postTypes\";\nimport { deleteData, editData } from \"../types/globalTypes\";\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\nimport { POSTMODAL_TYPES } from \"../types/postModalTypes\";\nexport const createCommentAction = ({\n  post,\n  newComment,\n  auth,\n  socket,\n  postModal\n}) => {\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n      if (postModal !== false) dispatch({\n        type: POSTMODAL_TYPES.ISMODAL,\n        payload: newPost\n      });\n      socket.emit(\"createComment\", newPost); // Notify\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? \"mentioned you in a comment.\" : \"has commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNewsNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateCommentAction = ({\n  comment,\n  post,\n  content,\n  auth\n}) => {\n  return async dispatch => {\n    const newComments = editData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeCommentAction = ({\n  comment,\n  post,\n  auth,\n  postModal\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    if (postModal !== false) dispatch({\n      type: POSTMODAL_TYPES.ISMODAL,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeCommentAction = ({\n  comment,\n  post,\n  auth,\n  postModal\n}) => {\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: deleteData(comment.likes, auth.user._id)\n    };\n    const newComments = editData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    if (postModal !== false) dispatch({\n      type: POSTMODAL_TYPES.ISMODAL,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteCommentAction = ({\n  post,\n  auth,\n  comment,\n  socket,\n  postModal\n}) => {\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    if (postModal !== false) dispatch({\n      type: POSTMODAL_TYPES.ISMODAL,\n      payload: newPost\n    });\n    socket.emit(\"deleteComment\", newPost);\n\n    try {\n      deleteArr.forEach(async item => {\n        await deleteDataAPI(`comment/${item._id}`, auth.token); // Notify\n\n        const msg = {\n          id: item._id,\n          text: comment.reply ? \"mentioned you in a comment.\" : \"has commented on your post.\",\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNewsNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/commentActions.js"],"names":["deleteDataAPI","patchDataAPI","postDataAPI","NOTIFY_TYPES","POST_TYPES","deleteData","editData","createNewsNotify","removeNewsNotify","POSTMODAL_TYPES","createCommentAction","post","newComment","auth","socket","postModal","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","ISMODAL","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","NOTIFY","error","response","updateCommentAction","comment","newComments","likeCommentAction","likes","unLikeCommentAction","deleteCommentAction","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import {\r\n  deleteDataAPI,\r\n  patchDataAPI,\r\n  postDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\nimport { deleteData, editData } from \"../types/globalTypes\";\r\nimport { createNewsNotify, removeNewsNotify } from \"./newsActions\";\r\nimport { POSTMODAL_TYPES } from \"../types/postModalTypes\";\r\nexport const createCommentAction = ({\r\n  post,\r\n  newComment,\r\n  auth,\r\n  socket,\r\n  postModal,\r\n}) => {\r\n  return async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n      if (postModal !== false)\r\n        dispatch({ type: POSTMODAL_TYPES.ISMODAL, payload: newPost });\r\n\r\n      socket.emit(\"createComment\", newPost);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? \"mentioned you in a comment.\"\r\n          : \"has commented on your post.\",\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNewsNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentAction = ({ comment, post, content, auth }) => {\r\n  return async (dispatch) => {\r\n    const newComments = editData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likeCommentAction = ({ comment, post, auth, postModal }) => {\r\n  return async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    if (postModal !== false)\r\n      dispatch({ type: POSTMODAL_TYPES.ISMODAL, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unLikeCommentAction = ({ comment, post, auth, postModal }) => {\r\n  return async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: deleteData(comment.likes, auth.user._id),\r\n    };\r\n    const newComments = editData(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    if (postModal !== false)\r\n      dispatch({ type: POSTMODAL_TYPES.ISMODAL, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteCommentAction = ({\r\n  post,\r\n  auth,\r\n  comment,\r\n  socket,\r\n  postModal,\r\n}) => {\r\n  return async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({\r\n      type: POST_TYPES.UPDATE_POST,\r\n      payload: newPost,\r\n    });\r\n\r\n    if (postModal !== false)\r\n      dispatch({ type: POSTMODAL_TYPES.ISMODAL, payload: newPost });\r\n\r\n    socket.emit(\"deleteComment\", newPost);\r\n    try {\r\n      deleteArr.forEach(async (item) => {\r\n        await deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n        // Notify\r\n        const msg = {\r\n          id: item._id,\r\n          text: comment.reply\r\n            ? \"mentioned you in a comment.\"\r\n            : \"has commented on your post.\",\r\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n          url: `/post/${post._id}`,\r\n        };\r\n\r\n        dispatch(removeNewsNotify({ msg, auth, socket }));\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}