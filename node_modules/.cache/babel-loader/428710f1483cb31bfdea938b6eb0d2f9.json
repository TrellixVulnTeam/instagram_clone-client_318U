{"ast":null,"code":"import _toConsumableArray from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Benkia/MERN/instagram-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{deleteData,editData}from\"../types/globalTypes\";import{MESSAGE_TYPES}from\"../types/messageTypes\";var initialState={users:[],resultUsers:0,data:[],firstLoad:false};var messageReducer=function messageReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case MESSAGE_TYPES.ADD_USER:if(state.users.every(function(item){return item._id!==action.payload._id;})){return _objectSpread(_objectSpread({},state),{},{users:[action.payload].concat(_toConsumableArray(state.users))});}return state;case MESSAGE_TYPES.ADD_MESSAGE:return _objectSpread(_objectSpread({},state),{},{data:state.data.map(function(item){return item._id===action.payload.recipient||item._id===action.payload.sender?_objectSpread(_objectSpread({},item),{},{messages:[].concat(_toConsumableArray(item.messages),[action.payload]),result:item.result+1}):item;}),users:state.users.map(function(user){return user._id===action.payload.recipient||user._id===action.payload.sender?_objectSpread(_objectSpread({},user),{},{text:action.payload.text,media:action.payload.media,call:action.payload.call}):user;})});case MESSAGE_TYPES.GET_CONVERSATIONS:return _objectSpread(_objectSpread({},state),{},{users:action.payload.newArr,resultUsers:action.payload.result,firstLoad:true});case MESSAGE_TYPES.GET_MESSAGES:return _objectSpread(_objectSpread({},state),{},{data:[].concat(_toConsumableArray(state.data),[action.payload])});case MESSAGE_TYPES.UPDATE_MESSAGES:return _objectSpread(_objectSpread({},state),{},{data:editData(state.data,action.payload._id,action.payload)});case MESSAGE_TYPES.DELETE_MESSAGES:return _objectSpread(_objectSpread({},state),{},{data:state.data.map(function(item){return item._id===action.payload._id?_objectSpread(_objectSpread({},item),{},{messages:action.payload.newData}):item;})});case MESSAGE_TYPES.DELETE_CONVERSATION:return _objectSpread(_objectSpread({},state),{},{users:deleteData(state.users,action.payload),data:deleteData(state.data,action.payload)});case MESSAGE_TYPES.CHECK_ONLINE_OFFLINE:return _objectSpread(_objectSpread({},state),{},{users:state.users.map(function(user){return action.payload.includes(user._id)?_objectSpread(_objectSpread({},user),{},{online:true}):_objectSpread(_objectSpread({},user),{},{online:false});})});default:return state;}};export default messageReducer;","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/reducers/messageReducer.js"],"names":["deleteData","editData","MESSAGE_TYPES","initialState","users","resultUsers","data","firstLoad","messageReducer","state","action","type","ADD_USER","every","item","_id","payload","ADD_MESSAGE","map","recipient","sender","messages","result","user","text","media","call","GET_CONVERSATIONS","newArr","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","newData","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","includes","online"],"mappings":"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","sourcesContent":["import { deleteData, editData } from \"../types/globalTypes\";\r\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\r\n\r\nconst initialState = {\r\n  users: [],\r\n  resultUsers: 0,\r\n  data: [],\r\n  firstLoad: false,\r\n};\r\n\r\nconst messageReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MESSAGE_TYPES.ADD_USER:\r\n      if (state.users.every((item) => item._id !== action.payload._id)) {\r\n        return {\r\n          ...state,\r\n          users: [action.payload, ...state.users],\r\n        };\r\n      }\r\n      return state;\r\n    case MESSAGE_TYPES.ADD_MESSAGE:\r\n      return {\r\n        ...state,\r\n        data: state.data.map((item) =>\r\n          item._id === action.payload.recipient ||\r\n          item._id === action.payload.sender\r\n            ? {\r\n                ...item,\r\n                messages: [...item.messages, action.payload],\r\n                result: item.result + 1,\r\n              }\r\n            : item\r\n        ),\r\n        users: state.users.map((user) =>\r\n          user._id === action.payload.recipient ||\r\n          user._id === action.payload.sender\r\n            ? {\r\n                ...user,\r\n                text: action.payload.text,\r\n                media: action.payload.media,\r\n                call: action.payload.call,\r\n              }\r\n            : user\r\n        ),\r\n      };\r\n    case MESSAGE_TYPES.GET_CONVERSATIONS:\r\n      return {\r\n        ...state,\r\n        users: action.payload.newArr,\r\n        resultUsers: action.payload.result,\r\n        firstLoad: true,\r\n      };\r\n    case MESSAGE_TYPES.GET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        data: [...state.data, action.payload],\r\n      };\r\n    case MESSAGE_TYPES.UPDATE_MESSAGES:\r\n      return {\r\n        ...state,\r\n        data: editData(state.data, action.payload._id, action.payload),\r\n      };\r\n    case MESSAGE_TYPES.DELETE_MESSAGES:\r\n      return {\r\n        ...state,\r\n        data: state.data.map((item) =>\r\n          item._id === action.payload._id\r\n            ? { ...item, messages: action.payload.newData }\r\n            : item\r\n        ),\r\n      };\r\n    case MESSAGE_TYPES.DELETE_CONVERSATION:\r\n      return {\r\n        ...state,\r\n        users: deleteData(state.users, action.payload),\r\n        data: deleteData(state.data, action.payload),\r\n      };\r\n    case MESSAGE_TYPES.CHECK_ONLINE_OFFLINE:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) =>\r\n          action.payload.includes(user._id)\r\n            ? { ...user, online: true }\r\n            : { ...user, online: false }\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messageReducer;\r\n"]},"metadata":{},"sourceType":"module"}