{"ast":null,"code":"import { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { POST_TYPES } from \"../types/postTypes\";\nexport const createPostAction = ({\n  content,\n  images,\n  auth\n}) => {\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (images.length > 0) media = await imageUpload(images);\n      const res = await postDataAPI(\"posts\", {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: {\n          loading: true\n        }\n      });\n      const res = await getDataAPI(\"posts\", token);\n      console.log(res);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/postActions.js"],"names":["NOTIFY_TYPES","imageUpload","getDataAPI","postDataAPI","POST_TYPES","createPostAction","content","images","auth","dispatch","media","type","NOTIFY","payload","loading","length","res","token","CREATE_POST","data","newPost","err","error","response","msg","getPosts","LOADING_POST","console","log"],"mappings":"AAAA,SAASA,YAAT,QAA6B,sBAA7B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,uBAAxC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA;AAAnB,CAAD,KAA+B;AAC7D,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAI;AACFD,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEX,YAAY,CAACY,MAArB;AAA6BC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAtC,OAAD,CAAR;AACA,UAAIP,MAAM,CAACQ,MAAP,GAAgB,CAApB,EAAuBL,KAAK,GAAG,MAAMT,WAAW,CAACM,MAAD,CAAzB;AAEvB,YAAMS,GAAG,GAAG,MAAMb,WAAW,CAC3B,OAD2B,EAE3B;AAAEG,QAAAA,OAAF;AAAWC,QAAAA,MAAM,EAAEG;AAAnB,OAF2B,EAG3BF,IAAI,CAACS,KAHsB,CAA7B;AAKAR,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEP,UAAU,CAACc,WADV;AAEPL,QAAAA,OAAO,EAAEG,GAAG,CAACG,IAAJ,CAASC;AAFX,OAAD,CAAR;AAKAX,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEX,YAAY,CAACY,MAArB;AAA6BC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAtC,OAAD,CAAR;AACD,KAfD,CAeE,OAAOO,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEX,YAAY,CAACY,MADZ;AAEPC,QAAAA,OAAO,EAAE;AAAES,UAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAvBD;AAwBD,CAzBM;AA2BP,OAAO,MAAMC,QAAQ,GAAIR,KAAD,IAAW;AACjC,SAAO,MAAOR,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP,UAAU,CAACsB,YAAnB;AAAiCb,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAA1C,OAAD,CAAR;AACA,YAAME,GAAG,GAAG,MAAMd,UAAU,CAAC,OAAD,EAAUe,KAAV,CAA5B;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACD,KAJD,CAIE,OAAOK,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEX,YAAY,CAACY,MADZ;AAEPC,QAAAA,OAAO,EAAE;AAAES,UAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK;AAA3B;AAFF,OAAD,CAAR;AAID;AACF,GAXD;AAYD,CAbM","sourcesContent":["import { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\n\r\nexport const createPostAction = ({ content, images, auth }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        \"posts\",\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: res.data.newPost,\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPosts = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: { loading: true } });\r\n      const res = await getDataAPI(\"posts\", token);\r\n      console.log(res);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}