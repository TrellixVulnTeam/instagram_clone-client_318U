{"ast":null,"code":"export const checkImage = file => {\n  let err = \"\";\n  if (!file) return err = \"File does not exist.\";\n  if (file.size > 1024 * 1024) //1mb\n    err = \"The largest image size is 1 mb\";\n  if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") err = \"Image format is incorrect\";\n  return err;\n};\nexport const imageUpload = async images => {\n  let imgArr = [];\n\n  for (const item of images) {\n    const formData = new FormData();\n    formData.append(\"file\", item);\n    formData.append(\"upload_preset\", \"pi0vdvj3\");\n    formData.append(\"cloud_name\", \"cuto\");\n    const res = await fetch(\"https://api.cloudinary.com/v1_1/cuto/image/upload\", {\n      method: \"POST\",\n      body: formData\n    });\n    const data = await res.json();\n    imgArr.push({\n      public_id: data.public_id,\n      url: data.secure_url\n    });\n  }\n\n  return imgArr;\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/utils/imageUpload.js"],"names":["checkImage","file","err","size","type","imageUpload","images","imgArr","item","formData","FormData","append","res","fetch","method","body","data","json","push","public_id","url","secure_url"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAIC,IAAD,IAAU;AAClC,MAAIC,GAAG,GAAG,EAAV;AACA,MAAI,CAACD,IAAL,EAAW,OAAQC,GAAG,GAAG,sBAAd;AAEX,MAAID,IAAI,CAACE,IAAL,GAAY,OAAO,IAAvB,EACE;AACAD,IAAAA,GAAG,GAAG,gCAAN;AAEF,MAAID,IAAI,CAACG,IAAL,KAAc,YAAd,IAA8BH,IAAI,CAACG,IAAL,KAAc,WAAhD,EACEF,GAAG,GAAG,2BAAN;AAEF,SAAOA,GAAP;AACD,CAZM;AAcP,OAAO,MAAMG,WAAW,GAAG,MAAOC,MAAP,IAAkB;AAC3C,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,MAAMC,IAAX,IAAmBF,MAAnB,EAA2B;AACzB,UAAMG,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;AACAC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiC,UAAjC;AACAF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8B,MAA9B;AAEA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,mDADqB,EAErB;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,IAAI,EAAEN;AAFR,KAFqB,CAAvB;AAQA,UAAMO,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAV,IAAAA,MAAM,CAACW,IAAP,CAAY;AAAEC,MAAAA,SAAS,EAAEH,IAAI,CAACG,SAAlB;AAA6BC,MAAAA,GAAG,EAAEJ,IAAI,CAACK;AAAvC,KAAZ;AACD;;AACD,SAAOd,MAAP;AACD,CApBM","sourcesContent":["export const checkImage = (file) => {\r\n  let err = \"\";\r\n  if (!file) return (err = \"File does not exist.\");\r\n\r\n  if (file.size > 1024 * 1024)\r\n    //1mb\r\n    err = \"The largest image size is 1 mb\";\r\n\r\n  if (file.type !== \"image/jpeg\" && file.type !== \"image/png\")\r\n    err = \"Image format is incorrect\";\r\n\r\n  return err;\r\n};\r\n\r\nexport const imageUpload = async (images) => {\r\n  let imgArr = [];\r\n  for (const item of images) {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", item);\r\n    formData.append(\"upload_preset\", \"pi0vdvj3\");\r\n    formData.append(\"cloud_name\", \"cuto\");\r\n\r\n    const res = await fetch(\r\n      \"https://api.cloudinary.com/v1_1/cuto/image/upload\",\r\n      {\r\n        method: \"POST\",\r\n        body: formData,\r\n      }\r\n    );\r\n\r\n    const data = await res.json();\r\n    imgArr.push({ public_id: data.public_id, url: data.secure_url });\r\n  }\r\n  return imgArr;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}