{"ast":null,"code":"import { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { POST_TYPES } from \"../types/postTypes\";\nexport const createPostAction = ({\n  content,\n  images,\n  auth\n}) => {\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (images.length > 0) media = await imageUpload(images);\n      const res = await postDataAPI(\"posts\", {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updatePostAction = ({\n  content,\n  images,\n  auth,\n  status\n}) => {\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if (status.content === content && imgOldUrl.length === status.images.length && imgNewUrl.length === 0) return;\n\n    try {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: true\n        }\n      });\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n      const res = await patchDataAPI(`post/${status._id}`, {\n        content,\n        images: media\n      }, auth.token);\n      console.log(res); // dispatch({\n      //   type: POST_TYPES.CREATE_POST,\n      //   payload: res.data.newPost,\n      // });\n\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: true\n      });\n      const res = await getDataAPI(\"posts\", token);\n      dispatch({\n        type: POST_TYPES.GET_POSTS,\n        payload: res.data\n      });\n      dispatch({\n        type: POST_TYPES.LOADING_POST,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/postActions.js"],"names":["NOTIFY_TYPES","imageUpload","getDataAPI","patchDataAPI","postDataAPI","POST_TYPES","createPostAction","content","images","auth","dispatch","media","type","NOTIFY","payload","loading","length","res","token","CREATE_POST","data","newPost","err","error","response","msg","updatePostAction","status","imgNewUrl","filter","img","url","imgOldUrl","_id","console","log","getPosts","LOADING_POST","GET_POSTS"],"mappings":"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","sourcesContent":["import { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { getDataAPI, patchDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { POST_TYPES } from \"../types/postTypes\";\r\n\r\nexport const createPostAction = ({ content, images, auth }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        \"posts\",\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: res.data.newPost,\r\n      });\r\n\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePostAction = ({ content, images, auth, status }) => {\r\n  return async (dispatch) => {\r\n    let media = [];\r\n\r\n    const imgNewUrl = images.filter((img) => !img.url);\r\n    const imgOldUrl = images.filter((img) => img.url);\r\n\r\n    if (\r\n      status.content === content &&\r\n      imgOldUrl.length === status.images.length &&\r\n      imgNewUrl.length === 0\r\n    )\r\n      return;\r\n\r\n    try {\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: true } });\r\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\r\n\r\n      const res = await patchDataAPI(\r\n        `post/${status._id}`,\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n\r\n      console.log(res);\r\n      // dispatch({\r\n      //   type: POST_TYPES.CREATE_POST,\r\n      //   payload: res.data.newPost,\r\n      // });\r\n      dispatch({ type: NOTIFY_TYPES.NOTIFY, payload: { loading: false } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPosts = (token) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n      const res = await getDataAPI(\"posts\", token);\r\n      dispatch({\r\n        type: POST_TYPES.GET_POSTS,\r\n        payload: res.data,\r\n      });\r\n      dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}