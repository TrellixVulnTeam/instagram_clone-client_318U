{"ast":null,"code":"import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { AUTH_TYPES } from \"../types/authTypes\";\nimport { deleteData } from \"../types/globalTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\nexport const getProfileUsers = ({\n  users,\n  id,\n  auth\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: PROFILE_TYPES.GET_ID,\n      payload: id\n    });\n\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = getDataAPI(`/user/${id}`, auth.token);\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n      const users = await res;\n      const userPosts = await res1;\n      console.log(res1);\n      dispatch({\n        type: PROFILE_TYPES.GET_USER,\n        payload: res.data\n      });\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Please add your full name\"\n    }\n  });\n  if (userData.fullname.length > 25) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your full name is too long\"\n    }\n  });\n  if (userData.story.length > 200) return dispatch({\n    type: NOTIFY_TYPES.NOTIFY,\n    payload: {\n      error: \"Your story is too long\"\n    }\n  });\n\n  try {\n    let media;\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        loading: true\n      }\n    });\n    if (avatar) media = await imageUpload([avatar]);\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: NOTIFY_TYPES.NOTIFY,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const changePasswordUser = ({\n  userData,\n  auth\n}) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const followAction = ({\n  users,\n  user,\n  auth\n}) => {\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user.id)) {\n      newUser = { ...user,\n        followers: [...user.followers, auth.user]\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: [...item.followers, auth.user]\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.FOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: [...auth.user.following, newUser]\n        }\n      }\n    });\n\n    try {\n      await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unFollowAction = ({\n  users,\n  user,\n  auth\n}) => {\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user.id)) {\n      newUser = { ...user,\n        followers: deleteData(user.followers, auth.user._id)\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: deleteData(item.followers, auth.user._id)\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.UNFOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: AUTH_TYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: deleteData(auth.user.following, newUser._id)\n        }\n      }\n    });\n\n    try {\n      const res = patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/profileActions.js"],"names":["getDataAPI","patchDataAPI","imageUpload","AUTH_TYPES","deleteData","NOTIFY_TYPES","PROFILE_TYPES","getProfileUsers","users","id","auth","dispatch","type","GET_ID","payload","LOADING","res","token","res1","userPosts","console","log","GET_USER","data","err","NOTIFY","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","changePasswordUser","followAction","newUser","every","item","_id","followers","forEach","FOLLOW","following","unFollowAction","UNFOLLOW"],"mappings":"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","sourcesContent":["import { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { AUTH_TYPES } from \"../types/authTypes\";\r\nimport { deleteData } from \"../types/globalTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\nimport { PROFILE_TYPES } from \"../types/profileTypes\";\r\n\r\nexport const getProfileUsers = ({ users, id, auth }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: PROFILE_TYPES.GET_ID,\r\n      payload: id,\r\n    });\r\n\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = getDataAPI(`/user/${id}`, auth.token);\r\n\r\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\r\n\r\n      const users = await res;\r\n      const userPosts = await res1;\r\n\r\n      console.log(res1);\r\n\r\n      dispatch({\r\n        type: PROFILE_TYPES.GET_USER,\r\n        payload: res.data,\r\n      });\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: false,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateProfileUser =\r\n  ({ userData, avatar, auth }) =>\r\n  async (dispatch) => {\r\n    if (!userData.fullname)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Please add your full name\" },\r\n      });\r\n    if (userData.fullname.length > 25)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your full name is too long\" },\r\n      });\r\n    if (userData.story.length > 200)\r\n      return dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: \"Your story is too long\" },\r\n      });\r\n    try {\r\n      let media;\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { loading: true },\r\n      });\r\n      if (avatar) media = await imageUpload([avatar]);\r\n\r\n      const res = await patchDataAPI(\r\n        \"user\",\r\n        {\r\n          ...userData,\r\n          avatar: avatar ? media[0].url : auth.user.avatar,\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: AUTH_TYPES.AUTH,\r\n        payload: {\r\n          ...auth,\r\n          user: {\r\n            ...auth.user,\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar,\r\n          },\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const changePasswordUser = ({ userData, auth }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: PROFILE_TYPES.LOADING,\r\n        payload: true,\r\n      });\r\n      const res = await patchDataAPI(\"changePassword\", userData, auth.token);\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { success: res.data.msg },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const followAction = ({ users, user, auth }) => {\r\n  return async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user.id)) {\r\n      newUser = { ...user, followers: [...user.followers, auth.user] };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = { ...item, followers: [...item.followers, auth.user] };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_TYPES.FOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, following: [...auth.user.following, newUser] },\r\n      },\r\n    });\r\n\r\n    try {\r\n      await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const unFollowAction = ({ users, user, auth }) => {\r\n  return async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user.id)) {\r\n      newUser = {\r\n        ...user,\r\n        followers: deleteData(user.followers, auth.user._id),\r\n      };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = {\r\n            ...item,\r\n            followers: deleteData(item.followers, auth.user._id),\r\n          };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_TYPES.UNFOLLOW,\r\n      payload: newUser,\r\n    });\r\n\r\n    dispatch({\r\n      type: AUTH_TYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: {\r\n          ...auth.user,\r\n          following: deleteData(auth.user.following, newUser._id),\r\n        },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}