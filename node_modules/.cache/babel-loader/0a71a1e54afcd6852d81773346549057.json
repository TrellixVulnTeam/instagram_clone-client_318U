{"ast":null,"code":"import { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\nexport const addUserAction = ({\n  user,\n  message\n}) => {\n  return async dispatch => {\n    if (message.users.every(item => item._id !== user._id)) {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: user\n      });\n    }\n  };\n};\nexport const addMessageAction = ({\n  msg,\n  auth,\n  socket\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    socket.emit(\"addMessage\", msg);\n\n    try {\n      await postDataAPI(\"message\", msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = ({\n  auth,\n  page = 1\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessagesAction = ({\n  auth,\n  id,\n  page = 1\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESSAGE_TYPES.GET_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMoreMessagesAction = ({\n  auth,\n  id,\n  page = 1\n}) => {\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      console.log(newData);\n    } catch (err) {\n      dispatch({\n        type: NOTIFY_TYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Benkia/MERN/instagram-clone/client/src/redux/actions/messageActions.js"],"names":["getDataAPI","postDataAPI","MESSAGE_TYPES","NOTIFY_TYPES","addUserAction","user","message","dispatch","users","every","item","_id","type","ADD_USER","payload","addMessageAction","msg","auth","socket","ADD_MESSAGE","emit","token","err","NOTIFY","error","response","data","getConversations","page","res","newArr","conversations","forEach","recipients","cv","push","text","media","GET_CONVERSATIONS","result","getMessagesAction","id","newData","messages","reverse","GET_MESSAGES","getMoreMessagesAction","console","log"],"mappings":"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","sourcesContent":["import { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { MESSAGE_TYPES } from \"../types/messageTypes\";\r\nimport { NOTIFY_TYPES } from \"../types/notifyTypes\";\r\n\r\nexport const addUserAction = ({ user, message }) => {\r\n  return async (dispatch) => {\r\n    if (message.users.every((item) => item._id !== user._id)) {\r\n      dispatch({\r\n        type: MESSAGE_TYPES.ADD_USER,\r\n        payload: user,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addMessageAction = ({ msg, auth, socket }) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: MESSAGE_TYPES.ADD_MESSAGE,\r\n      payload: msg,\r\n    });\r\n    socket.emit(\"addMessage\", msg);\r\n    try {\r\n      await postDataAPI(\"message\", msg, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getConversations = ({ auth, page = 1 }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `conversations?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n      let newArr = [];\r\n\r\n      res.data.conversations.forEach((item) => {\r\n        item.recipients.forEach((cv) => {\r\n          if (cv._id !== auth.user._id) {\r\n            newArr.push({ ...cv, text: item.text, media: item.media });\r\n          }\r\n        });\r\n      });\r\n\r\n      dispatch({\r\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMessagesAction = ({ auth, id, page = 1 }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `message/${id}?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n\r\n      const newData = { ...res.data, messages: res.data.messages.reverse() };\r\n\r\n      dispatch({\r\n        type: MESSAGE_TYPES.GET_MESSAGES,\r\n        payload: { ...newData, _id: id, page },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMoreMessagesAction = ({ auth, id, page = 1 }) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `message/${id}?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n\r\n      const newData = { ...res.data, messages: res.data.messages.reverse() };\r\n\r\n      console.log(newData);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFY_TYPES.NOTIFY,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}